// Autogenerated from Pigeon (v21.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dr.achim.sleep_timer;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NotificationRequest {
    private @Nullable String timerId;

    public @Nullable String getTimerId() {
      return timerId;
    }

    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String description;

    public @Nullable String getDescription() {
      return description;
    }

    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable Long accentColor;

    public @Nullable Long getAccentColor() {
      return accentColor;
    }

    public void setAccentColor(@Nullable Long setterArg) {
      this.accentColor = setterArg;
    }

    private @Nullable String restartAction;

    public @Nullable String getRestartAction() {
      return restartAction;
    }

    public void setRestartAction(@Nullable String setterArg) {
      this.restartAction = setterArg;
    }

    private @Nullable String continueAction;

    public @Nullable String getContinueAction() {
      return continueAction;
    }

    public void setContinueAction(@Nullable String setterArg) {
      this.continueAction = setterArg;
    }

    private @Nullable String pauseAction;

    public @Nullable String getPauseAction() {
      return pauseAction;
    }

    public void setPauseAction(@Nullable String setterArg) {
      this.pauseAction = setterArg;
    }

    private @Nullable String cancelAction;

    public @Nullable String getCancelAction() {
      return cancelAction;
    }

    public void setCancelAction(@Nullable String setterArg) {
      this.cancelAction = setterArg;
    }

    private @Nullable List<Long> extendActions;

    public @Nullable List<Long> getExtendActions() {
      return extendActions;
    }

    public void setExtendActions(@Nullable List<Long> setterArg) {
      this.extendActions = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      NotificationRequest that = (NotificationRequest) o;
      return Objects.equals(timerId, that.timerId) && Objects.equals(title, that.title) && Objects.equals(description, that.description) && Objects.equals(accentColor, that.accentColor) && Objects.equals(restartAction, that.restartAction) && Objects.equals(continueAction, that.continueAction) && Objects.equals(pauseAction, that.pauseAction) && Objects.equals(cancelAction, that.cancelAction) && Objects.equals(extendActions, that.extendActions);
    }

    @Override
    public int hashCode() {
      return Objects.hash(timerId, title, description, accentColor, restartAction, continueAction, pauseAction, cancelAction, extendActions);
    }

    public static final class Builder {

      private @Nullable String timerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String description;

      @CanIgnoreReturnValue
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }

      private @Nullable Long accentColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setAccentColor(@Nullable Long setterArg) {
        this.accentColor = setterArg;
        return this;
      }

      private @Nullable String restartAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setRestartAction(@Nullable String setterArg) {
        this.restartAction = setterArg;
        return this;
      }

      private @Nullable String continueAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setContinueAction(@Nullable String setterArg) {
        this.continueAction = setterArg;
        return this;
      }

      private @Nullable String pauseAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setPauseAction(@Nullable String setterArg) {
        this.pauseAction = setterArg;
        return this;
      }

      private @Nullable String cancelAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setCancelAction(@Nullable String setterArg) {
        this.cancelAction = setterArg;
        return this;
      }

      private @Nullable List<Long> extendActions;

      @CanIgnoreReturnValue
      public @NonNull Builder setExtendActions(@Nullable List<Long> setterArg) {
        this.extendActions = setterArg;
        return this;
      }

      public @NonNull NotificationRequest build() {
        NotificationRequest pigeonReturn = new NotificationRequest();
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setTitle(title);
        pigeonReturn.setDescription(description);
        pigeonReturn.setAccentColor(accentColor);
        pigeonReturn.setRestartAction(restartAction);
        pigeonReturn.setContinueAction(continueAction);
        pigeonReturn.setPauseAction(pauseAction);
        pigeonReturn.setCancelAction(cancelAction);
        pigeonReturn.setExtendActions(extendActions);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(9);
      toListResult.add(timerId);
      toListResult.add(title);
      toListResult.add(description);
      toListResult.add(accentColor);
      toListResult.add(restartAction);
      toListResult.add(continueAction);
      toListResult.add(pauseAction);
      toListResult.add(cancelAction);
      toListResult.add(extendActions);
      return toListResult;
    }

    static @NonNull NotificationRequest fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      NotificationRequest pigeonResult = new NotificationRequest();
      Object timerId = pigeonVar_list.get(0);
      pigeonResult.setTimerId((String) timerId);
      Object title = pigeonVar_list.get(1);
      pigeonResult.setTitle((String) title);
      Object description = pigeonVar_list.get(2);
      pigeonResult.setDescription((String) description);
      Object accentColor = pigeonVar_list.get(3);
      pigeonResult.setAccentColor((accentColor == null) ? null : ((accentColor instanceof Integer) ? (Integer) accentColor : (Long) accentColor));
      Object restartAction = pigeonVar_list.get(4);
      pigeonResult.setRestartAction((String) restartAction);
      Object continueAction = pigeonVar_list.get(5);
      pigeonResult.setContinueAction((String) continueAction);
      Object pauseAction = pigeonVar_list.get(6);
      pigeonResult.setPauseAction((String) pauseAction);
      Object cancelAction = pigeonVar_list.get(7);
      pigeonResult.setCancelAction((String) cancelAction);
      Object extendActions = pigeonVar_list.get(8);
      pigeonResult.setExtendActions((List<Long>) extendActions);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TimeNotificationRequest {
    private @Nullable String description;

    public @Nullable String getDescription() {
      return description;
    }

    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable String timerId;

    public @Nullable String getTimerId() {
      return timerId;
    }

    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable Long accentColor;

    public @Nullable Long getAccentColor() {
      return accentColor;
    }

    public void setAccentColor(@Nullable Long setterArg) {
      this.accentColor = setterArg;
    }

    private @Nullable String restartAction;

    public @Nullable String getRestartAction() {
      return restartAction;
    }

    public void setRestartAction(@Nullable String setterArg) {
      this.restartAction = setterArg;
    }

    private @Nullable String continueAction;

    public @Nullable String getContinueAction() {
      return continueAction;
    }

    public void setContinueAction(@Nullable String setterArg) {
      this.continueAction = setterArg;
    }

    private @Nullable String pauseAction;

    public @Nullable String getPauseAction() {
      return pauseAction;
    }

    public void setPauseAction(@Nullable String setterArg) {
      this.pauseAction = setterArg;
    }

    private @Nullable String cancelAction;

    public @Nullable String getCancelAction() {
      return cancelAction;
    }

    public void setCancelAction(@Nullable String setterArg) {
      this.cancelAction = setterArg;
    }

    private @Nullable List<Long> extendActions;

    public @Nullable List<Long> getExtendActions() {
      return extendActions;
    }

    public void setExtendActions(@Nullable List<Long> setterArg) {
      this.extendActions = setterArg;
    }

    /** The initial number of minutes the timer was set to. */
    private @Nullable Long duration;

    public @Nullable Long getDuration() {
      return duration;
    }

    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    /** The number of seconds left for the timer. */
    private @Nullable Long remainingTime;

    public @Nullable Long getRemainingTime() {
      return remainingTime;
    }

    public void setRemainingTime(@Nullable Long setterArg) {
      this.remainingTime = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      TimeNotificationRequest that = (TimeNotificationRequest) o;
      return Objects.equals(description, that.description) && Objects.equals(timerId, that.timerId) && Objects.equals(title, that.title) && Objects.equals(accentColor, that.accentColor) && Objects.equals(restartAction, that.restartAction) && Objects.equals(continueAction, that.continueAction) && Objects.equals(pauseAction, that.pauseAction) && Objects.equals(cancelAction, that.cancelAction) && Objects.equals(extendActions, that.extendActions) && Objects.equals(duration, that.duration) && Objects.equals(remainingTime, that.remainingTime);
    }

    @Override
    public int hashCode() {
      return Objects.hash(description, timerId, title, accentColor, restartAction, continueAction, pauseAction, cancelAction, extendActions, duration, remainingTime);
    }

    public static final class Builder {

      private @Nullable String description;

      @CanIgnoreReturnValue
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }

      private @Nullable String timerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable Long accentColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setAccentColor(@Nullable Long setterArg) {
        this.accentColor = setterArg;
        return this;
      }

      private @Nullable String restartAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setRestartAction(@Nullable String setterArg) {
        this.restartAction = setterArg;
        return this;
      }

      private @Nullable String continueAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setContinueAction(@Nullable String setterArg) {
        this.continueAction = setterArg;
        return this;
      }

      private @Nullable String pauseAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setPauseAction(@Nullable String setterArg) {
        this.pauseAction = setterArg;
        return this;
      }

      private @Nullable String cancelAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setCancelAction(@Nullable String setterArg) {
        this.cancelAction = setterArg;
        return this;
      }

      private @Nullable List<Long> extendActions;

      @CanIgnoreReturnValue
      public @NonNull Builder setExtendActions(@Nullable List<Long> setterArg) {
        this.extendActions = setterArg;
        return this;
      }

      private @Nullable Long duration;

      @CanIgnoreReturnValue
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }

      private @Nullable Long remainingTime;

      @CanIgnoreReturnValue
      public @NonNull Builder setRemainingTime(@Nullable Long setterArg) {
        this.remainingTime = setterArg;
        return this;
      }

      public @NonNull TimeNotificationRequest build() {
        TimeNotificationRequest pigeonReturn = new TimeNotificationRequest();
        pigeonReturn.setDescription(description);
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setTitle(title);
        pigeonReturn.setAccentColor(accentColor);
        pigeonReturn.setRestartAction(restartAction);
        pigeonReturn.setContinueAction(continueAction);
        pigeonReturn.setPauseAction(pauseAction);
        pigeonReturn.setCancelAction(cancelAction);
        pigeonReturn.setExtendActions(extendActions);
        pigeonReturn.setDuration(duration);
        pigeonReturn.setRemainingTime(remainingTime);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(11);
      toListResult.add(description);
      toListResult.add(timerId);
      toListResult.add(title);
      toListResult.add(accentColor);
      toListResult.add(restartAction);
      toListResult.add(continueAction);
      toListResult.add(pauseAction);
      toListResult.add(cancelAction);
      toListResult.add(extendActions);
      toListResult.add(duration);
      toListResult.add(remainingTime);
      return toListResult;
    }

    static @NonNull TimeNotificationRequest fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      TimeNotificationRequest pigeonResult = new TimeNotificationRequest();
      Object description = pigeonVar_list.get(0);
      pigeonResult.setDescription((String) description);
      Object timerId = pigeonVar_list.get(1);
      pigeonResult.setTimerId((String) timerId);
      Object title = pigeonVar_list.get(2);
      pigeonResult.setTitle((String) title);
      Object accentColor = pigeonVar_list.get(3);
      pigeonResult.setAccentColor((accentColor == null) ? null : ((accentColor instanceof Integer) ? (Integer) accentColor : (Long) accentColor));
      Object restartAction = pigeonVar_list.get(4);
      pigeonResult.setRestartAction((String) restartAction);
      Object continueAction = pigeonVar_list.get(5);
      pigeonResult.setContinueAction((String) continueAction);
      Object pauseAction = pigeonVar_list.get(6);
      pigeonResult.setPauseAction((String) pauseAction);
      Object cancelAction = pigeonVar_list.get(7);
      pigeonResult.setCancelAction((String) cancelAction);
      Object extendActions = pigeonVar_list.get(8);
      pigeonResult.setExtendActions((List<Long>) extendActions);
      Object duration = pigeonVar_list.get(9);
      pigeonResult.setDuration((duration == null) ? null : ((duration instanceof Integer) ? (Integer) duration : (Long) duration));
      Object remainingTime = pigeonVar_list.get(10);
      pigeonResult.setRemainingTime((remainingTime == null) ? null : ((remainingTime instanceof Integer) ? (Integer) remainingTime : (Long) remainingTime));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RunningNotificationRequest {
    private @Nullable String description;

    public @Nullable String getDescription() {
      return description;
    }

    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable String timerId;

    public @Nullable String getTimerId() {
      return timerId;
    }

    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable Long accentColor;

    public @Nullable Long getAccentColor() {
      return accentColor;
    }

    public void setAccentColor(@Nullable Long setterArg) {
      this.accentColor = setterArg;
    }

    private @Nullable String restartAction;

    public @Nullable String getRestartAction() {
      return restartAction;
    }

    public void setRestartAction(@Nullable String setterArg) {
      this.restartAction = setterArg;
    }

    private @Nullable String continueAction;

    public @Nullable String getContinueAction() {
      return continueAction;
    }

    public void setContinueAction(@Nullable String setterArg) {
      this.continueAction = setterArg;
    }

    private @Nullable String pauseAction;

    public @Nullable String getPauseAction() {
      return pauseAction;
    }

    public void setPauseAction(@Nullable String setterArg) {
      this.pauseAction = setterArg;
    }

    private @Nullable String cancelAction;

    public @Nullable String getCancelAction() {
      return cancelAction;
    }

    public void setCancelAction(@Nullable String setterArg) {
      this.cancelAction = setterArg;
    }

    private @Nullable List<Long> extendActions;

    public @Nullable List<Long> getExtendActions() {
      return extendActions;
    }

    public void setExtendActions(@Nullable List<Long> setterArg) {
      this.extendActions = setterArg;
    }

    private @Nullable Long duration;

    public @Nullable Long getDuration() {
      return duration;
    }

    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    private @Nullable Long remainingTime;

    public @Nullable Long getRemainingTime() {
      return remainingTime;
    }

    public void setRemainingTime(@Nullable Long setterArg) {
      this.remainingTime = setterArg;
    }

    /** Enable shake to extend functionality. */
    private @Nullable Boolean shakeToExtend;

    public @Nullable Boolean getShakeToExtend() {
      return shakeToExtend;
    }

    public void setShakeToExtend(@Nullable Boolean setterArg) {
      this.shakeToExtend = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      RunningNotificationRequest that = (RunningNotificationRequest) o;
      return Objects.equals(description, that.description) && Objects.equals(timerId, that.timerId) && Objects.equals(title, that.title) && Objects.equals(accentColor, that.accentColor) && Objects.equals(restartAction, that.restartAction) && Objects.equals(continueAction, that.continueAction) && Objects.equals(pauseAction, that.pauseAction) && Objects.equals(cancelAction, that.cancelAction) && Objects.equals(extendActions, that.extendActions) && Objects.equals(duration, that.duration) && Objects.equals(remainingTime, that.remainingTime) && Objects.equals(shakeToExtend, that.shakeToExtend);
    }

    @Override
    public int hashCode() {
      return Objects.hash(description, timerId, title, accentColor, restartAction, continueAction, pauseAction, cancelAction, extendActions, duration, remainingTime, shakeToExtend);
    }

    public static final class Builder {

      private @Nullable String description;

      @CanIgnoreReturnValue
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }

      private @Nullable String timerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable Long accentColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setAccentColor(@Nullable Long setterArg) {
        this.accentColor = setterArg;
        return this;
      }

      private @Nullable String restartAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setRestartAction(@Nullable String setterArg) {
        this.restartAction = setterArg;
        return this;
      }

      private @Nullable String continueAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setContinueAction(@Nullable String setterArg) {
        this.continueAction = setterArg;
        return this;
      }

      private @Nullable String pauseAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setPauseAction(@Nullable String setterArg) {
        this.pauseAction = setterArg;
        return this;
      }

      private @Nullable String cancelAction;

      @CanIgnoreReturnValue
      public @NonNull Builder setCancelAction(@Nullable String setterArg) {
        this.cancelAction = setterArg;
        return this;
      }

      private @Nullable List<Long> extendActions;

      @CanIgnoreReturnValue
      public @NonNull Builder setExtendActions(@Nullable List<Long> setterArg) {
        this.extendActions = setterArg;
        return this;
      }

      private @Nullable Long duration;

      @CanIgnoreReturnValue
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }

      private @Nullable Long remainingTime;

      @CanIgnoreReturnValue
      public @NonNull Builder setRemainingTime(@Nullable Long setterArg) {
        this.remainingTime = setterArg;
        return this;
      }

      private @Nullable Boolean shakeToExtend;

      @CanIgnoreReturnValue
      public @NonNull Builder setShakeToExtend(@Nullable Boolean setterArg) {
        this.shakeToExtend = setterArg;
        return this;
      }

      public @NonNull RunningNotificationRequest build() {
        RunningNotificationRequest pigeonReturn = new RunningNotificationRequest();
        pigeonReturn.setDescription(description);
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setTitle(title);
        pigeonReturn.setAccentColor(accentColor);
        pigeonReturn.setRestartAction(restartAction);
        pigeonReturn.setContinueAction(continueAction);
        pigeonReturn.setPauseAction(pauseAction);
        pigeonReturn.setCancelAction(cancelAction);
        pigeonReturn.setExtendActions(extendActions);
        pigeonReturn.setDuration(duration);
        pigeonReturn.setRemainingTime(remainingTime);
        pigeonReturn.setShakeToExtend(shakeToExtend);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(12);
      toListResult.add(description);
      toListResult.add(timerId);
      toListResult.add(title);
      toListResult.add(accentColor);
      toListResult.add(restartAction);
      toListResult.add(continueAction);
      toListResult.add(pauseAction);
      toListResult.add(cancelAction);
      toListResult.add(extendActions);
      toListResult.add(duration);
      toListResult.add(remainingTime);
      toListResult.add(shakeToExtend);
      return toListResult;
    }

    static @NonNull RunningNotificationRequest fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      RunningNotificationRequest pigeonResult = new RunningNotificationRequest();
      Object description = pigeonVar_list.get(0);
      pigeonResult.setDescription((String) description);
      Object timerId = pigeonVar_list.get(1);
      pigeonResult.setTimerId((String) timerId);
      Object title = pigeonVar_list.get(2);
      pigeonResult.setTitle((String) title);
      Object accentColor = pigeonVar_list.get(3);
      pigeonResult.setAccentColor((accentColor == null) ? null : ((accentColor instanceof Integer) ? (Integer) accentColor : (Long) accentColor));
      Object restartAction = pigeonVar_list.get(4);
      pigeonResult.setRestartAction((String) restartAction);
      Object continueAction = pigeonVar_list.get(5);
      pigeonResult.setContinueAction((String) continueAction);
      Object pauseAction = pigeonVar_list.get(6);
      pigeonResult.setPauseAction((String) pauseAction);
      Object cancelAction = pigeonVar_list.get(7);
      pigeonResult.setCancelAction((String) cancelAction);
      Object extendActions = pigeonVar_list.get(8);
      pigeonResult.setExtendActions((List<Long>) extendActions);
      Object duration = pigeonVar_list.get(9);
      pigeonResult.setDuration((duration == null) ? null : ((duration instanceof Integer) ? (Integer) duration : (Long) duration));
      Object remainingTime = pigeonVar_list.get(10);
      pigeonResult.setRemainingTime((remainingTime == null) ? null : ((remainingTime instanceof Integer) ? (Integer) remainingTime : (Long) remainingTime));
      Object shakeToExtend = pigeonVar_list.get(11);
      pigeonResult.setShakeToExtend((Boolean) shakeToExtend);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NotificationResponse {
    private @Nullable String timerId;

    public @Nullable String getTimerId() {
      return timerId;
    }

    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable Boolean success;

    public @Nullable Boolean getSuccess() {
      return success;
    }

    public void setSuccess(@Nullable Boolean setterArg) {
      this.success = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      NotificationResponse that = (NotificationResponse) o;
      return Objects.equals(timerId, that.timerId) && Objects.equals(success, that.success);
    }

    @Override
    public int hashCode() {
      return Objects.hash(timerId, success);
    }

    public static final class Builder {

      private @Nullable String timerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }

      private @Nullable Boolean success;

      @CanIgnoreReturnValue
      public @NonNull Builder setSuccess(@Nullable Boolean setterArg) {
        this.success = setterArg;
        return this;
      }

      public @NonNull NotificationResponse build() {
        NotificationResponse pigeonReturn = new NotificationResponse();
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setSuccess(success);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(timerId);
      toListResult.add(success);
      return toListResult;
    }

    static @NonNull NotificationResponse fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      NotificationResponse pigeonResult = new NotificationResponse();
      Object timerId = pigeonVar_list.get(0);
      pigeonResult.setTimerId((String) timerId);
      Object success = pigeonVar_list.get(1);
      pigeonResult.setSuccess((Boolean) success);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CancelRequest {
    private @Nullable String timerId;

    public @Nullable String getTimerId() {
      return timerId;
    }

    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      CancelRequest that = (CancelRequest) o;
      return Objects.equals(timerId, that.timerId);
    }

    @Override
    public int hashCode() {
      return Objects.hash(timerId);
    }

    public static final class Builder {

      private @Nullable String timerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }

      public @NonNull CancelRequest build() {
        CancelRequest pigeonReturn = new CancelRequest();
        pigeonReturn.setTimerId(timerId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(timerId);
      return toListResult;
    }

    static @NonNull CancelRequest fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      CancelRequest pigeonResult = new CancelRequest();
      Object timerId = pigeonVar_list.get(0);
      pigeonResult.setTimerId((String) timerId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CancelResponse {
    private @Nullable String timerId;

    public @Nullable String getTimerId() {
      return timerId;
    }

    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable Boolean success;

    public @Nullable Boolean getSuccess() {
      return success;
    }

    public void setSuccess(@Nullable Boolean setterArg) {
      this.success = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      CancelResponse that = (CancelResponse) o;
      return Objects.equals(timerId, that.timerId) && Objects.equals(success, that.success);
    }

    @Override
    public int hashCode() {
      return Objects.hash(timerId, success);
    }

    public static final class Builder {

      private @Nullable String timerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }

      private @Nullable Boolean success;

      @CanIgnoreReturnValue
      public @NonNull Builder setSuccess(@Nullable Boolean setterArg) {
        this.success = setterArg;
        return this;
      }

      public @NonNull CancelResponse build() {
        CancelResponse pigeonReturn = new CancelResponse();
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setSuccess(success);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(timerId);
      toListResult.add(success);
      return toListResult;
    }

    static @NonNull CancelResponse fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      CancelResponse pigeonResult = new CancelResponse();
      Object timerId = pigeonVar_list.get(0);
      pigeonResult.setTimerId((String) timerId);
      Object success = pigeonVar_list.get(1);
      pigeonResult.setSuccess((Boolean) success);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ExtendTimeRequest {
    private @Nullable String timerId;

    public @Nullable String getTimerId() {
      return timerId;
    }

    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    /** The time in seconds the timer was extended by. */
    private @Nullable Long additionalTime;

    public @Nullable Long getAdditionalTime() {
      return additionalTime;
    }

    public void setAdditionalTime(@Nullable Long setterArg) {
      this.additionalTime = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      ExtendTimeRequest that = (ExtendTimeRequest) o;
      return Objects.equals(timerId, that.timerId) && Objects.equals(additionalTime, that.additionalTime);
    }

    @Override
    public int hashCode() {
      return Objects.hash(timerId, additionalTime);
    }

    public static final class Builder {

      private @Nullable String timerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }

      private @Nullable Long additionalTime;

      @CanIgnoreReturnValue
      public @NonNull Builder setAdditionalTime(@Nullable Long setterArg) {
        this.additionalTime = setterArg;
        return this;
      }

      public @NonNull ExtendTimeRequest build() {
        ExtendTimeRequest pigeonReturn = new ExtendTimeRequest();
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setAdditionalTime(additionalTime);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(timerId);
      toListResult.add(additionalTime);
      return toListResult;
    }

    static @NonNull ExtendTimeRequest fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      ExtendTimeRequest pigeonResult = new ExtendTimeRequest();
      Object timerId = pigeonVar_list.get(0);
      pigeonResult.setTimerId((String) timerId);
      Object additionalTime = pigeonVar_list.get(1);
      pigeonResult.setAdditionalTime((additionalTime == null) ? null : ((additionalTime instanceof Integer) ? (Integer) additionalTime : (Long) additionalTime));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CountDownRequest {
    private @Nullable String timerId;

    public @Nullable String getTimerId() {
      return timerId;
    }

    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    /** The new time after countdown in seconds. */
    private @Nullable Long newTime;

    public @Nullable Long getNewTime() {
      return newTime;
    }

    public void setNewTime(@Nullable Long setterArg) {
      this.newTime = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      CountDownRequest that = (CountDownRequest) o;
      return Objects.equals(timerId, that.timerId) && Objects.equals(newTime, that.newTime);
    }

    @Override
    public int hashCode() {
      return Objects.hash(timerId, newTime);
    }

    public static final class Builder {

      private @Nullable String timerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }

      private @Nullable Long newTime;

      @CanIgnoreReturnValue
      public @NonNull Builder setNewTime(@Nullable Long setterArg) {
        this.newTime = setterArg;
        return this;
      }

      public @NonNull CountDownRequest build() {
        CountDownRequest pigeonReturn = new CountDownRequest();
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setNewTime(newTime);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(timerId);
      toListResult.add(newTime);
      return toListResult;
    }

    static @NonNull CountDownRequest fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      CountDownRequest pigeonResult = new CountDownRequest();
      Object timerId = pigeonVar_list.get(0);
      pigeonResult.setTimerId((String) timerId);
      Object newTime = pigeonVar_list.get(1);
      pigeonResult.setNewTime((newTime == null) ? null : ((newTime instanceof Integer) ? (Integer) newTime : (Long) newTime));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class OpenRequest {
    private @Nullable String timerId;

    public @Nullable String getTimerId() {
      return timerId;
    }

    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      OpenRequest that = (OpenRequest) o;
      return Objects.equals(timerId, that.timerId);
    }

    @Override
    public int hashCode() {
      return Objects.hash(timerId);
    }

    public static final class Builder {

      private @Nullable String timerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }

      public @NonNull OpenRequest build() {
        OpenRequest pigeonReturn = new OpenRequest();
        pigeonReturn.setTimerId(timerId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(timerId);
      return toListResult;
    }

    static @NonNull OpenRequest fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      OpenRequest pigeonResult = new OpenRequest();
      Object timerId = pigeonVar_list.get(0);
      pigeonResult.setTimerId((String) timerId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TimerRequest {
    private @Nullable String timerId;

    public @Nullable String getTimerId() {
      return timerId;
    }

    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      TimerRequest that = (TimerRequest) o;
      return Objects.equals(timerId, that.timerId);
    }

    @Override
    public int hashCode() {
      return Objects.hash(timerId);
    }

    public static final class Builder {

      private @Nullable String timerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }

      public @NonNull TimerRequest build() {
        TimerRequest pigeonReturn = new TimerRequest();
        pigeonReturn.setTimerId(timerId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(timerId);
      return toListResult;
    }

    static @NonNull TimerRequest fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      TimerRequest pigeonResult = new TimerRequest();
      Object timerId = pigeonVar_list.get(0);
      pigeonResult.setTimerId((String) timerId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class WidgetUpdateResponse {
    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      WidgetUpdateResponse that = (WidgetUpdateResponse) o;
      return Objects.equals(title, that.title);
    }

    @Override
    public int hashCode() {
      return Objects.hash(title);
    }

    public static final class Builder {

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      public @NonNull WidgetUpdateResponse build() {
        WidgetUpdateResponse pigeonReturn = new WidgetUpdateResponse();
        pigeonReturn.setTitle(title);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(title);
      return toListResult;
    }

    static @NonNull WidgetUpdateResponse fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      WidgetUpdateResponse pigeonResult = new WidgetUpdateResponse();
      Object title = pigeonVar_list.get(0);
      pigeonResult.setTitle((String) title);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Package {
    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String icon;

    public @Nullable String getIcon() {
      return icon;
    }

    public void setIcon(@Nullable String setterArg) {
      this.icon = setterArg;
    }

    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Package that = (Package) o;
      return Objects.equals(title, that.title) && Objects.equals(icon, that.icon) && Objects.equals(packageName, that.packageName);
    }

    @Override
    public int hashCode() {
      return Objects.hash(title, icon, packageName);
    }

    public static final class Builder {

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String icon;

      @CanIgnoreReturnValue
      public @NonNull Builder setIcon(@Nullable String setterArg) {
        this.icon = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      public @NonNull Package build() {
        Package pigeonReturn = new Package();
        pigeonReturn.setTitle(title);
        pigeonReturn.setIcon(icon);
        pigeonReturn.setPackageName(packageName);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(3);
      toListResult.add(title);
      toListResult.add(icon);
      toListResult.add(packageName);
      return toListResult;
    }

    static @NonNull Package fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Package pigeonResult = new Package();
      Object title = pigeonVar_list.get(0);
      pigeonResult.setTitle((String) title);
      Object icon = pigeonVar_list.get(1);
      pigeonResult.setIcon((String) icon);
      Object packageName = pigeonVar_list.get(2);
      pigeonResult.setPackageName((String) packageName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InstalledAppsResponse {
    private @Nullable List<Package> apps;

    public @Nullable List<Package> getApps() {
      return apps;
    }

    public void setApps(@Nullable List<Package> setterArg) {
      this.apps = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      InstalledAppsResponse that = (InstalledAppsResponse) o;
      return Objects.equals(apps, that.apps);
    }

    @Override
    public int hashCode() {
      return Objects.hash(apps);
    }

    public static final class Builder {

      private @Nullable List<Package> apps;

      @CanIgnoreReturnValue
      public @NonNull Builder setApps(@Nullable List<Package> setterArg) {
        this.apps = setterArg;
        return this;
      }

      public @NonNull InstalledAppsResponse build() {
        InstalledAppsResponse pigeonReturn = new InstalledAppsResponse();
        pigeonReturn.setApps(apps);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(apps);
      return toListResult;
    }

    static @NonNull InstalledAppsResponse fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      InstalledAppsResponse pigeonResult = new InstalledAppsResponse();
      Object apps = pigeonVar_list.get(0);
      pigeonResult.setApps((List<Package>) apps);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LaunchAppRequest {
    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      LaunchAppRequest that = (LaunchAppRequest) o;
      return Objects.equals(packageName, that.packageName);
    }

    @Override
    public int hashCode() {
      return Objects.hash(packageName);
    }

    public static final class Builder {

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      public @NonNull LaunchAppRequest build() {
        LaunchAppRequest pigeonReturn = new LaunchAppRequest();
        pigeonReturn.setPackageName(packageName);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(packageName);
      return toListResult;
    }

    static @NonNull LaunchAppRequest fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      LaunchAppRequest pigeonResult = new LaunchAppRequest();
      Object packageName = pigeonVar_list.get(0);
      pigeonResult.setPackageName((String) packageName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ToggleRequest {
    private @Nullable Boolean enable;

    public @Nullable Boolean getEnable() {
      return enable;
    }

    public void setEnable(@Nullable Boolean setterArg) {
      this.enable = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      ToggleRequest that = (ToggleRequest) o;
      return Objects.equals(enable, that.enable);
    }

    @Override
    public int hashCode() {
      return Objects.hash(enable);
    }

    public static final class Builder {

      private @Nullable Boolean enable;

      @CanIgnoreReturnValue
      public @NonNull Builder setEnable(@Nullable Boolean setterArg) {
        this.enable = setterArg;
        return this;
      }

      public @NonNull ToggleRequest build() {
        ToggleRequest pigeonReturn = new ToggleRequest();
        pigeonReturn.setEnable(enable);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(enable);
      return toListResult;
    }

    static @NonNull ToggleRequest fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      ToggleRequest pigeonResult = new ToggleRequest();
      Object enable = pigeonVar_list.get(0);
      pigeonResult.setEnable((Boolean) enable);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return NotificationRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return TimeNotificationRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return RunningNotificationRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return NotificationResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return CancelRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return CancelResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return ExtendTimeRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return CountDownRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return OpenRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return TimerRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return WidgetUpdateResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return Package.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return InstalledAppsResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return LaunchAppRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return ToggleRequest.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof NotificationRequest) {
        stream.write(129);
        writeValue(stream, ((NotificationRequest) value).toList());
      } else if (value instanceof TimeNotificationRequest) {
        stream.write(130);
        writeValue(stream, ((TimeNotificationRequest) value).toList());
      } else if (value instanceof RunningNotificationRequest) {
        stream.write(131);
        writeValue(stream, ((RunningNotificationRequest) value).toList());
      } else if (value instanceof NotificationResponse) {
        stream.write(132);
        writeValue(stream, ((NotificationResponse) value).toList());
      } else if (value instanceof CancelRequest) {
        stream.write(133);
        writeValue(stream, ((CancelRequest) value).toList());
      } else if (value instanceof CancelResponse) {
        stream.write(134);
        writeValue(stream, ((CancelResponse) value).toList());
      } else if (value instanceof ExtendTimeRequest) {
        stream.write(135);
        writeValue(stream, ((ExtendTimeRequest) value).toList());
      } else if (value instanceof CountDownRequest) {
        stream.write(136);
        writeValue(stream, ((CountDownRequest) value).toList());
      } else if (value instanceof OpenRequest) {
        stream.write(137);
        writeValue(stream, ((OpenRequest) value).toList());
      } else if (value instanceof TimerRequest) {
        stream.write(138);
        writeValue(stream, ((TimerRequest) value).toList());
      } else if (value instanceof WidgetUpdateResponse) {
        stream.write(139);
        writeValue(stream, ((WidgetUpdateResponse) value).toList());
      } else if (value instanceof Package) {
        stream.write(140);
        writeValue(stream, ((Package) value).toList());
      } else if (value instanceof InstalledAppsResponse) {
        stream.write(141);
        writeValue(stream, ((InstalledAppsResponse) value).toList());
      } else if (value instanceof LaunchAppRequest) {
        stream.write(142);
        writeValue(stream, ((LaunchAppRequest) value).toList());
      } else if (value instanceof ToggleRequest) {
        stream.write(143);
        writeValue(stream, ((ToggleRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface HostTimerApi {

    @NonNull 
    NotificationResponse showRunningNotification(@NonNull RunningNotificationRequest request);

    @NonNull 
    NotificationResponse showPausingNotification(@NonNull TimeNotificationRequest request);

    @NonNull 
    NotificationResponse showElapsedNotification(@NonNull NotificationRequest request);

    @NonNull 
    CancelResponse cancelTimer(@NonNull CancelRequest request);

    void toggleExtendByShake(@NonNull ToggleRequest request);

    @NonNull 
    InstalledAppsResponse getInstalledPlayerApps();

    @NonNull 
    InstalledAppsResponse getInstalledAlarmApps();

    void launchApp(@NonNull LaunchAppRequest request);

    /** The codec used by HostTimerApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `HostTimerApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable HostTimerApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable HostTimerApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sleep_timer.HostTimerApi.showRunningNotification" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RunningNotificationRequest requestArg = (RunningNotificationRequest) args.get(0);
                try {
                  NotificationResponse output = api.showRunningNotification(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sleep_timer.HostTimerApi.showPausingNotification" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                TimeNotificationRequest requestArg = (TimeNotificationRequest) args.get(0);
                try {
                  NotificationResponse output = api.showPausingNotification(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sleep_timer.HostTimerApi.showElapsedNotification" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                NotificationRequest requestArg = (NotificationRequest) args.get(0);
                try {
                  NotificationResponse output = api.showElapsedNotification(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sleep_timer.HostTimerApi.cancelTimer" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                CancelRequest requestArg = (CancelRequest) args.get(0);
                try {
                  CancelResponse output = api.cancelTimer(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sleep_timer.HostTimerApi.toggleExtendByShake" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ToggleRequest requestArg = (ToggleRequest) args.get(0);
                try {
                  api.toggleExtendByShake(requestArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sleep_timer.HostTimerApi.getInstalledPlayerApps" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  InstalledAppsResponse output = api.getInstalledPlayerApps();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sleep_timer.HostTimerApi.getInstalledAlarmApps" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  InstalledAppsResponse output = api.getInstalledAlarmApps();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sleep_timer.HostTimerApi.launchApp" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                LaunchAppRequest requestArg = (LaunchAppRequest) args.get(0);
                try {
                  api.launchApp(requestArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterTimerApi {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public FlutterTimerApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public FlutterTimerApi(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /**
     * Public interface for sending reply.
     * The codec used by FlutterTimerApi.
     */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void onExtendTime(@NonNull ExtendTimeRequest requestArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onExtendTime" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(requestArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onCountDown(@NonNull CountDownRequest requestArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onCountDown" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(requestArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onContinueRequest(@NonNull TimerRequest requestArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onContinueRequest" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(requestArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPauseRequest(@NonNull TimerRequest requestArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onPauseRequest" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(requestArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onCancelRequest(@NonNull TimerRequest requestArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onCancelRequest" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(requestArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onRestartRequest(@NonNull TimerRequest requestArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onRestartRequest" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(requestArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onOpen(@NonNull OpenRequest requestArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onOpen" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(requestArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onAlarm(@NonNull TimerRequest requestArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onAlarm" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(requestArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onWidgetUpdate(@NonNull Result<WidgetUpdateResponse> result) {
      final String channelName = "dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onWidgetUpdate" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          null,
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else if (listReply.get(0) == null) {
                result.error(new FlutterError("null-error", "Flutter api returned null value for non-null return value.", ""));
              } else {
                @SuppressWarnings("ConstantConditions")
                WidgetUpdateResponse output = (WidgetUpdateResponse) listReply.get(0);
                result.success(output);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onWidgetStartTimer(@NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onWidgetStartTimer" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          null,
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
