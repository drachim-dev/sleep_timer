// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dr.achim.sleep_timer;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NotificationRequest {
    private @Nullable String timerId;
    public @Nullable String getTimerId() { return timerId; }
    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String description;
    public @Nullable String getDescription() { return description; }
    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable Long accentColor;
    public @Nullable Long getAccentColor() { return accentColor; }
    public void setAccentColor(@Nullable Long setterArg) {
      this.accentColor = setterArg;
    }

    private @Nullable String restartAction;
    public @Nullable String getRestartAction() { return restartAction; }
    public void setRestartAction(@Nullable String setterArg) {
      this.restartAction = setterArg;
    }

    private @Nullable String continueAction;
    public @Nullable String getContinueAction() { return continueAction; }
    public void setContinueAction(@Nullable String setterArg) {
      this.continueAction = setterArg;
    }

    private @Nullable String pauseAction;
    public @Nullable String getPauseAction() { return pauseAction; }
    public void setPauseAction(@Nullable String setterArg) {
      this.pauseAction = setterArg;
    }

    private @Nullable String cancelAction;
    public @Nullable String getCancelAction() { return cancelAction; }
    public void setCancelAction(@Nullable String setterArg) {
      this.cancelAction = setterArg;
    }

    private @Nullable List<Long> extendActions;
    public @Nullable List<Long> getExtendActions() { return extendActions; }
    public void setExtendActions(@Nullable List<Long> setterArg) {
      this.extendActions = setterArg;
    }

    public static final class Builder {
      private @Nullable String timerId;
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable String description;
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }
      private @Nullable Long accentColor;
      public @NonNull Builder setAccentColor(@Nullable Long setterArg) {
        this.accentColor = setterArg;
        return this;
      }
      private @Nullable String restartAction;
      public @NonNull Builder setRestartAction(@Nullable String setterArg) {
        this.restartAction = setterArg;
        return this;
      }
      private @Nullable String continueAction;
      public @NonNull Builder setContinueAction(@Nullable String setterArg) {
        this.continueAction = setterArg;
        return this;
      }
      private @Nullable String pauseAction;
      public @NonNull Builder setPauseAction(@Nullable String setterArg) {
        this.pauseAction = setterArg;
        return this;
      }
      private @Nullable String cancelAction;
      public @NonNull Builder setCancelAction(@Nullable String setterArg) {
        this.cancelAction = setterArg;
        return this;
      }
      private @Nullable List<Long> extendActions;
      public @NonNull Builder setExtendActions(@Nullable List<Long> setterArg) {
        this.extendActions = setterArg;
        return this;
      }
      public @NonNull NotificationRequest build() {
        NotificationRequest pigeonReturn = new NotificationRequest();
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setTitle(title);
        pigeonReturn.setDescription(description);
        pigeonReturn.setAccentColor(accentColor);
        pigeonReturn.setRestartAction(restartAction);
        pigeonReturn.setContinueAction(continueAction);
        pigeonReturn.setPauseAction(pauseAction);
        pigeonReturn.setCancelAction(cancelAction);
        pigeonReturn.setExtendActions(extendActions);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("title", title);
      toMapResult.put("description", description);
      toMapResult.put("accentColor", accentColor);
      toMapResult.put("restartAction", restartAction);
      toMapResult.put("continueAction", continueAction);
      toMapResult.put("pauseAction", pauseAction);
      toMapResult.put("cancelAction", cancelAction);
      toMapResult.put("extendActions", extendActions);
      return toMapResult;
    }
    static @NonNull NotificationRequest fromMap(@NonNull Map<String, Object> map) {
      NotificationRequest pigeonResult = new NotificationRequest();
      Object timerId = map.get("timerId");
      pigeonResult.setTimerId((String)timerId);
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object description = map.get("description");
      pigeonResult.setDescription((String)description);
      Object accentColor = map.get("accentColor");
      pigeonResult.setAccentColor((accentColor == null) ? null : ((accentColor instanceof Integer) ? (Integer)accentColor : (Long)accentColor));
      Object restartAction = map.get("restartAction");
      pigeonResult.setRestartAction((String)restartAction);
      Object continueAction = map.get("continueAction");
      pigeonResult.setContinueAction((String)continueAction);
      Object pauseAction = map.get("pauseAction");
      pigeonResult.setPauseAction((String)pauseAction);
      Object cancelAction = map.get("cancelAction");
      pigeonResult.setCancelAction((String)cancelAction);
      Object extendActions = map.get("extendActions");
      pigeonResult.setExtendActions((List<Long>)extendActions);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TimeNotificationRequest {
    private @Nullable String description;
    public @Nullable String getDescription() { return description; }
    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable String timerId;
    public @Nullable String getTimerId() { return timerId; }
    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable Long accentColor;
    public @Nullable Long getAccentColor() { return accentColor; }
    public void setAccentColor(@Nullable Long setterArg) {
      this.accentColor = setterArg;
    }

    private @Nullable String restartAction;
    public @Nullable String getRestartAction() { return restartAction; }
    public void setRestartAction(@Nullable String setterArg) {
      this.restartAction = setterArg;
    }

    private @Nullable String continueAction;
    public @Nullable String getContinueAction() { return continueAction; }
    public void setContinueAction(@Nullable String setterArg) {
      this.continueAction = setterArg;
    }

    private @Nullable String pauseAction;
    public @Nullable String getPauseAction() { return pauseAction; }
    public void setPauseAction(@Nullable String setterArg) {
      this.pauseAction = setterArg;
    }

    private @Nullable String cancelAction;
    public @Nullable String getCancelAction() { return cancelAction; }
    public void setCancelAction(@Nullable String setterArg) {
      this.cancelAction = setterArg;
    }

    private @Nullable List<Long> extendActions;
    public @Nullable List<Long> getExtendActions() { return extendActions; }
    public void setExtendActions(@Nullable List<Long> setterArg) {
      this.extendActions = setterArg;
    }

    private @Nullable Long duration;
    public @Nullable Long getDuration() { return duration; }
    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    private @Nullable Long remainingTime;
    public @Nullable Long getRemainingTime() { return remainingTime; }
    public void setRemainingTime(@Nullable Long setterArg) {
      this.remainingTime = setterArg;
    }

    public static final class Builder {
      private @Nullable String description;
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }
      private @Nullable String timerId;
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable Long accentColor;
      public @NonNull Builder setAccentColor(@Nullable Long setterArg) {
        this.accentColor = setterArg;
        return this;
      }
      private @Nullable String restartAction;
      public @NonNull Builder setRestartAction(@Nullable String setterArg) {
        this.restartAction = setterArg;
        return this;
      }
      private @Nullable String continueAction;
      public @NonNull Builder setContinueAction(@Nullable String setterArg) {
        this.continueAction = setterArg;
        return this;
      }
      private @Nullable String pauseAction;
      public @NonNull Builder setPauseAction(@Nullable String setterArg) {
        this.pauseAction = setterArg;
        return this;
      }
      private @Nullable String cancelAction;
      public @NonNull Builder setCancelAction(@Nullable String setterArg) {
        this.cancelAction = setterArg;
        return this;
      }
      private @Nullable List<Long> extendActions;
      public @NonNull Builder setExtendActions(@Nullable List<Long> setterArg) {
        this.extendActions = setterArg;
        return this;
      }
      private @Nullable Long duration;
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }
      private @Nullable Long remainingTime;
      public @NonNull Builder setRemainingTime(@Nullable Long setterArg) {
        this.remainingTime = setterArg;
        return this;
      }
      public @NonNull TimeNotificationRequest build() {
        TimeNotificationRequest pigeonReturn = new TimeNotificationRequest();
        pigeonReturn.setDescription(description);
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setTitle(title);
        pigeonReturn.setAccentColor(accentColor);
        pigeonReturn.setRestartAction(restartAction);
        pigeonReturn.setContinueAction(continueAction);
        pigeonReturn.setPauseAction(pauseAction);
        pigeonReturn.setCancelAction(cancelAction);
        pigeonReturn.setExtendActions(extendActions);
        pigeonReturn.setDuration(duration);
        pigeonReturn.setRemainingTime(remainingTime);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("description", description);
      toMapResult.put("timerId", timerId);
      toMapResult.put("title", title);
      toMapResult.put("accentColor", accentColor);
      toMapResult.put("restartAction", restartAction);
      toMapResult.put("continueAction", continueAction);
      toMapResult.put("pauseAction", pauseAction);
      toMapResult.put("cancelAction", cancelAction);
      toMapResult.put("extendActions", extendActions);
      toMapResult.put("duration", duration);
      toMapResult.put("remainingTime", remainingTime);
      return toMapResult;
    }
    static @NonNull TimeNotificationRequest fromMap(@NonNull Map<String, Object> map) {
      TimeNotificationRequest pigeonResult = new TimeNotificationRequest();
      Object description = map.get("description");
      pigeonResult.setDescription((String)description);
      Object timerId = map.get("timerId");
      pigeonResult.setTimerId((String)timerId);
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object accentColor = map.get("accentColor");
      pigeonResult.setAccentColor((accentColor == null) ? null : ((accentColor instanceof Integer) ? (Integer)accentColor : (Long)accentColor));
      Object restartAction = map.get("restartAction");
      pigeonResult.setRestartAction((String)restartAction);
      Object continueAction = map.get("continueAction");
      pigeonResult.setContinueAction((String)continueAction);
      Object pauseAction = map.get("pauseAction");
      pigeonResult.setPauseAction((String)pauseAction);
      Object cancelAction = map.get("cancelAction");
      pigeonResult.setCancelAction((String)cancelAction);
      Object extendActions = map.get("extendActions");
      pigeonResult.setExtendActions((List<Long>)extendActions);
      Object duration = map.get("duration");
      pigeonResult.setDuration((duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration));
      Object remainingTime = map.get("remainingTime");
      pigeonResult.setRemainingTime((remainingTime == null) ? null : ((remainingTime instanceof Integer) ? (Integer)remainingTime : (Long)remainingTime));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class RunningNotificationRequest {
    private @Nullable String description;
    public @Nullable String getDescription() { return description; }
    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable String timerId;
    public @Nullable String getTimerId() { return timerId; }
    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable Long accentColor;
    public @Nullable Long getAccentColor() { return accentColor; }
    public void setAccentColor(@Nullable Long setterArg) {
      this.accentColor = setterArg;
    }

    private @Nullable String restartAction;
    public @Nullable String getRestartAction() { return restartAction; }
    public void setRestartAction(@Nullable String setterArg) {
      this.restartAction = setterArg;
    }

    private @Nullable String continueAction;
    public @Nullable String getContinueAction() { return continueAction; }
    public void setContinueAction(@Nullable String setterArg) {
      this.continueAction = setterArg;
    }

    private @Nullable String pauseAction;
    public @Nullable String getPauseAction() { return pauseAction; }
    public void setPauseAction(@Nullable String setterArg) {
      this.pauseAction = setterArg;
    }

    private @Nullable String cancelAction;
    public @Nullable String getCancelAction() { return cancelAction; }
    public void setCancelAction(@Nullable String setterArg) {
      this.cancelAction = setterArg;
    }

    private @Nullable List<Long> extendActions;
    public @Nullable List<Long> getExtendActions() { return extendActions; }
    public void setExtendActions(@Nullable List<Long> setterArg) {
      this.extendActions = setterArg;
    }

    private @Nullable Long duration;
    public @Nullable Long getDuration() { return duration; }
    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    private @Nullable Long remainingTime;
    public @Nullable Long getRemainingTime() { return remainingTime; }
    public void setRemainingTime(@Nullable Long setterArg) {
      this.remainingTime = setterArg;
    }

    private @Nullable Boolean shakeToExtend;
    public @Nullable Boolean getShakeToExtend() { return shakeToExtend; }
    public void setShakeToExtend(@Nullable Boolean setterArg) {
      this.shakeToExtend = setterArg;
    }

    public static final class Builder {
      private @Nullable String description;
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }
      private @Nullable String timerId;
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable Long accentColor;
      public @NonNull Builder setAccentColor(@Nullable Long setterArg) {
        this.accentColor = setterArg;
        return this;
      }
      private @Nullable String restartAction;
      public @NonNull Builder setRestartAction(@Nullable String setterArg) {
        this.restartAction = setterArg;
        return this;
      }
      private @Nullable String continueAction;
      public @NonNull Builder setContinueAction(@Nullable String setterArg) {
        this.continueAction = setterArg;
        return this;
      }
      private @Nullable String pauseAction;
      public @NonNull Builder setPauseAction(@Nullable String setterArg) {
        this.pauseAction = setterArg;
        return this;
      }
      private @Nullable String cancelAction;
      public @NonNull Builder setCancelAction(@Nullable String setterArg) {
        this.cancelAction = setterArg;
        return this;
      }
      private @Nullable List<Long> extendActions;
      public @NonNull Builder setExtendActions(@Nullable List<Long> setterArg) {
        this.extendActions = setterArg;
        return this;
      }
      private @Nullable Long duration;
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }
      private @Nullable Long remainingTime;
      public @NonNull Builder setRemainingTime(@Nullable Long setterArg) {
        this.remainingTime = setterArg;
        return this;
      }
      private @Nullable Boolean shakeToExtend;
      public @NonNull Builder setShakeToExtend(@Nullable Boolean setterArg) {
        this.shakeToExtend = setterArg;
        return this;
      }
      public @NonNull RunningNotificationRequest build() {
        RunningNotificationRequest pigeonReturn = new RunningNotificationRequest();
        pigeonReturn.setDescription(description);
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setTitle(title);
        pigeonReturn.setAccentColor(accentColor);
        pigeonReturn.setRestartAction(restartAction);
        pigeonReturn.setContinueAction(continueAction);
        pigeonReturn.setPauseAction(pauseAction);
        pigeonReturn.setCancelAction(cancelAction);
        pigeonReturn.setExtendActions(extendActions);
        pigeonReturn.setDuration(duration);
        pigeonReturn.setRemainingTime(remainingTime);
        pigeonReturn.setShakeToExtend(shakeToExtend);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("description", description);
      toMapResult.put("timerId", timerId);
      toMapResult.put("title", title);
      toMapResult.put("accentColor", accentColor);
      toMapResult.put("restartAction", restartAction);
      toMapResult.put("continueAction", continueAction);
      toMapResult.put("pauseAction", pauseAction);
      toMapResult.put("cancelAction", cancelAction);
      toMapResult.put("extendActions", extendActions);
      toMapResult.put("duration", duration);
      toMapResult.put("remainingTime", remainingTime);
      toMapResult.put("shakeToExtend", shakeToExtend);
      return toMapResult;
    }
    static @NonNull RunningNotificationRequest fromMap(@NonNull Map<String, Object> map) {
      RunningNotificationRequest pigeonResult = new RunningNotificationRequest();
      Object description = map.get("description");
      pigeonResult.setDescription((String)description);
      Object timerId = map.get("timerId");
      pigeonResult.setTimerId((String)timerId);
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object accentColor = map.get("accentColor");
      pigeonResult.setAccentColor((accentColor == null) ? null : ((accentColor instanceof Integer) ? (Integer)accentColor : (Long)accentColor));
      Object restartAction = map.get("restartAction");
      pigeonResult.setRestartAction((String)restartAction);
      Object continueAction = map.get("continueAction");
      pigeonResult.setContinueAction((String)continueAction);
      Object pauseAction = map.get("pauseAction");
      pigeonResult.setPauseAction((String)pauseAction);
      Object cancelAction = map.get("cancelAction");
      pigeonResult.setCancelAction((String)cancelAction);
      Object extendActions = map.get("extendActions");
      pigeonResult.setExtendActions((List<Long>)extendActions);
      Object duration = map.get("duration");
      pigeonResult.setDuration((duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration));
      Object remainingTime = map.get("remainingTime");
      pigeonResult.setRemainingTime((remainingTime == null) ? null : ((remainingTime instanceof Integer) ? (Integer)remainingTime : (Long)remainingTime));
      Object shakeToExtend = map.get("shakeToExtend");
      pigeonResult.setShakeToExtend((Boolean)shakeToExtend);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NotificationResponse {
    private @Nullable String timerId;
    public @Nullable String getTimerId() { return timerId; }
    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable Boolean success;
    public @Nullable Boolean getSuccess() { return success; }
    public void setSuccess(@Nullable Boolean setterArg) {
      this.success = setterArg;
    }

    public static final class Builder {
      private @Nullable String timerId;
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }
      private @Nullable Boolean success;
      public @NonNull Builder setSuccess(@Nullable Boolean setterArg) {
        this.success = setterArg;
        return this;
      }
      public @NonNull NotificationResponse build() {
        NotificationResponse pigeonReturn = new NotificationResponse();
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setSuccess(success);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("success", success);
      return toMapResult;
    }
    static @NonNull NotificationResponse fromMap(@NonNull Map<String, Object> map) {
      NotificationResponse pigeonResult = new NotificationResponse();
      Object timerId = map.get("timerId");
      pigeonResult.setTimerId((String)timerId);
      Object success = map.get("success");
      pigeonResult.setSuccess((Boolean)success);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CancelRequest {
    private @Nullable String timerId;
    public @Nullable String getTimerId() { return timerId; }
    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    public static final class Builder {
      private @Nullable String timerId;
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }
      public @NonNull CancelRequest build() {
        CancelRequest pigeonReturn = new CancelRequest();
        pigeonReturn.setTimerId(timerId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      return toMapResult;
    }
    static @NonNull CancelRequest fromMap(@NonNull Map<String, Object> map) {
      CancelRequest pigeonResult = new CancelRequest();
      Object timerId = map.get("timerId");
      pigeonResult.setTimerId((String)timerId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CancelResponse {
    private @Nullable String timerId;
    public @Nullable String getTimerId() { return timerId; }
    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable Boolean success;
    public @Nullable Boolean getSuccess() { return success; }
    public void setSuccess(@Nullable Boolean setterArg) {
      this.success = setterArg;
    }

    public static final class Builder {
      private @Nullable String timerId;
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }
      private @Nullable Boolean success;
      public @NonNull Builder setSuccess(@Nullable Boolean setterArg) {
        this.success = setterArg;
        return this;
      }
      public @NonNull CancelResponse build() {
        CancelResponse pigeonReturn = new CancelResponse();
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setSuccess(success);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("success", success);
      return toMapResult;
    }
    static @NonNull CancelResponse fromMap(@NonNull Map<String, Object> map) {
      CancelResponse pigeonResult = new CancelResponse();
      Object timerId = map.get("timerId");
      pigeonResult.setTimerId((String)timerId);
      Object success = map.get("success");
      pigeonResult.setSuccess((Boolean)success);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ExtendTimeRequest {
    private @Nullable String timerId;
    public @Nullable String getTimerId() { return timerId; }
    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable Long additionalTime;
    public @Nullable Long getAdditionalTime() { return additionalTime; }
    public void setAdditionalTime(@Nullable Long setterArg) {
      this.additionalTime = setterArg;
    }

    public static final class Builder {
      private @Nullable String timerId;
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }
      private @Nullable Long additionalTime;
      public @NonNull Builder setAdditionalTime(@Nullable Long setterArg) {
        this.additionalTime = setterArg;
        return this;
      }
      public @NonNull ExtendTimeRequest build() {
        ExtendTimeRequest pigeonReturn = new ExtendTimeRequest();
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setAdditionalTime(additionalTime);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("additionalTime", additionalTime);
      return toMapResult;
    }
    static @NonNull ExtendTimeRequest fromMap(@NonNull Map<String, Object> map) {
      ExtendTimeRequest pigeonResult = new ExtendTimeRequest();
      Object timerId = map.get("timerId");
      pigeonResult.setTimerId((String)timerId);
      Object additionalTime = map.get("additionalTime");
      pigeonResult.setAdditionalTime((additionalTime == null) ? null : ((additionalTime instanceof Integer) ? (Integer)additionalTime : (Long)additionalTime));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CountDownRequest {
    private @Nullable String timerId;
    public @Nullable String getTimerId() { return timerId; }
    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    private @Nullable Long newTime;
    public @Nullable Long getNewTime() { return newTime; }
    public void setNewTime(@Nullable Long setterArg) {
      this.newTime = setterArg;
    }

    public static final class Builder {
      private @Nullable String timerId;
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }
      private @Nullable Long newTime;
      public @NonNull Builder setNewTime(@Nullable Long setterArg) {
        this.newTime = setterArg;
        return this;
      }
      public @NonNull CountDownRequest build() {
        CountDownRequest pigeonReturn = new CountDownRequest();
        pigeonReturn.setTimerId(timerId);
        pigeonReturn.setNewTime(newTime);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("newTime", newTime);
      return toMapResult;
    }
    static @NonNull CountDownRequest fromMap(@NonNull Map<String, Object> map) {
      CountDownRequest pigeonResult = new CountDownRequest();
      Object timerId = map.get("timerId");
      pigeonResult.setTimerId((String)timerId);
      Object newTime = map.get("newTime");
      pigeonResult.setNewTime((newTime == null) ? null : ((newTime instanceof Integer) ? (Integer)newTime : (Long)newTime));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OpenRequest {
    private @Nullable String timerId;
    public @Nullable String getTimerId() { return timerId; }
    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    public static final class Builder {
      private @Nullable String timerId;
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }
      public @NonNull OpenRequest build() {
        OpenRequest pigeonReturn = new OpenRequest();
        pigeonReturn.setTimerId(timerId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      return toMapResult;
    }
    static @NonNull OpenRequest fromMap(@NonNull Map<String, Object> map) {
      OpenRequest pigeonResult = new OpenRequest();
      Object timerId = map.get("timerId");
      pigeonResult.setTimerId((String)timerId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TimerRequest {
    private @Nullable String timerId;
    public @Nullable String getTimerId() { return timerId; }
    public void setTimerId(@Nullable String setterArg) {
      this.timerId = setterArg;
    }

    public static final class Builder {
      private @Nullable String timerId;
      public @NonNull Builder setTimerId(@Nullable String setterArg) {
        this.timerId = setterArg;
        return this;
      }
      public @NonNull TimerRequest build() {
        TimerRequest pigeonReturn = new TimerRequest();
        pigeonReturn.setTimerId(timerId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      return toMapResult;
    }
    static @NonNull TimerRequest fromMap(@NonNull Map<String, Object> map) {
      TimerRequest pigeonResult = new TimerRequest();
      Object timerId = map.get("timerId");
      pigeonResult.setTimerId((String)timerId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WidgetUpdateResponse {
    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    public static final class Builder {
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      public @NonNull WidgetUpdateResponse build() {
        WidgetUpdateResponse pigeonReturn = new WidgetUpdateResponse();
        pigeonReturn.setTitle(title);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("title", title);
      return toMapResult;
    }
    static @NonNull WidgetUpdateResponse fromMap(@NonNull Map<String, Object> map) {
      WidgetUpdateResponse pigeonResult = new WidgetUpdateResponse();
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Package {
    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String icon;
    public @Nullable String getIcon() { return icon; }
    public void setIcon(@Nullable String setterArg) {
      this.icon = setterArg;
    }

    private @Nullable String packageName;
    public @Nullable String getPackageName() { return packageName; }
    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    public static final class Builder {
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable String icon;
      public @NonNull Builder setIcon(@Nullable String setterArg) {
        this.icon = setterArg;
        return this;
      }
      private @Nullable String packageName;
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }
      public @NonNull Package build() {
        Package pigeonReturn = new Package();
        pigeonReturn.setTitle(title);
        pigeonReturn.setIcon(icon);
        pigeonReturn.setPackageName(packageName);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("title", title);
      toMapResult.put("icon", icon);
      toMapResult.put("packageName", packageName);
      return toMapResult;
    }
    static @NonNull Package fromMap(@NonNull Map<String, Object> map) {
      Package pigeonResult = new Package();
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object icon = map.get("icon");
      pigeonResult.setIcon((String)icon);
      Object packageName = map.get("packageName");
      pigeonResult.setPackageName((String)packageName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InstalledAppsResponse {
    private @Nullable List<Package> apps;
    public @Nullable List<Package> getApps() { return apps; }
    public void setApps(@Nullable List<Package> setterArg) {
      this.apps = setterArg;
    }

    public static final class Builder {
      private @Nullable List<Package> apps;
      public @NonNull Builder setApps(@Nullable List<Package> setterArg) {
        this.apps = setterArg;
        return this;
      }
      public @NonNull InstalledAppsResponse build() {
        InstalledAppsResponse pigeonReturn = new InstalledAppsResponse();
        pigeonReturn.setApps(apps);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("apps", apps);
      return toMapResult;
    }
    static @NonNull InstalledAppsResponse fromMap(@NonNull Map<String, Object> map) {
      InstalledAppsResponse pigeonResult = new InstalledAppsResponse();
      Object apps = map.get("apps");
      pigeonResult.setApps((List<Package>)apps);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LaunchAppRequest {
    private @Nullable String packageName;
    public @Nullable String getPackageName() { return packageName; }
    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    public static final class Builder {
      private @Nullable String packageName;
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }
      public @NonNull LaunchAppRequest build() {
        LaunchAppRequest pigeonReturn = new LaunchAppRequest();
        pigeonReturn.setPackageName(packageName);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("packageName", packageName);
      return toMapResult;
    }
    static @NonNull LaunchAppRequest fromMap(@NonNull Map<String, Object> map) {
      LaunchAppRequest pigeonResult = new LaunchAppRequest();
      Object packageName = map.get("packageName");
      pigeonResult.setPackageName((String)packageName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ToggleRequest {
    private @Nullable Boolean enable;
    public @Nullable Boolean getEnable() { return enable; }
    public void setEnable(@Nullable Boolean setterArg) {
      this.enable = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean enable;
      public @NonNull Builder setEnable(@Nullable Boolean setterArg) {
        this.enable = setterArg;
        return this;
      }
      public @NonNull ToggleRequest build() {
        ToggleRequest pigeonReturn = new ToggleRequest();
        pigeonReturn.setEnable(enable);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("enable", enable);
      return toMapResult;
    }
    static @NonNull ToggleRequest fromMap(@NonNull Map<String, Object> map) {
      ToggleRequest pigeonResult = new ToggleRequest();
      Object enable = map.get("enable");
      pigeonResult.setEnable((Boolean)enable);
      return pigeonResult;
    }
  }
  private static class HostTimerApiCodec extends StandardMessageCodec {
    public static final HostTimerApiCodec INSTANCE = new HostTimerApiCodec();
    private HostTimerApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CancelRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CancelResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return InstalledAppsResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return LaunchAppRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return NotificationRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return NotificationResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return Package.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return RunningNotificationRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return TimeNotificationRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ToggleRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CancelRequest) {
        stream.write(128);
        writeValue(stream, ((CancelRequest) value).toMap());
      } else 
      if (value instanceof CancelResponse) {
        stream.write(129);
        writeValue(stream, ((CancelResponse) value).toMap());
      } else 
      if (value instanceof InstalledAppsResponse) {
        stream.write(130);
        writeValue(stream, ((InstalledAppsResponse) value).toMap());
      } else 
      if (value instanceof LaunchAppRequest) {
        stream.write(131);
        writeValue(stream, ((LaunchAppRequest) value).toMap());
      } else 
      if (value instanceof NotificationRequest) {
        stream.write(132);
        writeValue(stream, ((NotificationRequest) value).toMap());
      } else 
      if (value instanceof NotificationResponse) {
        stream.write(133);
        writeValue(stream, ((NotificationResponse) value).toMap());
      } else 
      if (value instanceof Package) {
        stream.write(134);
        writeValue(stream, ((Package) value).toMap());
      } else 
      if (value instanceof RunningNotificationRequest) {
        stream.write(135);
        writeValue(stream, ((RunningNotificationRequest) value).toMap());
      } else 
      if (value instanceof TimeNotificationRequest) {
        stream.write(136);
        writeValue(stream, ((TimeNotificationRequest) value).toMap());
      } else 
      if (value instanceof ToggleRequest) {
        stream.write(137);
        writeValue(stream, ((ToggleRequest) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HostTimerApi {
    @NonNull NotificationResponse showRunningNotification(@NonNull RunningNotificationRequest request);
    @NonNull NotificationResponse showPausingNotification(@NonNull TimeNotificationRequest request);
    @NonNull NotificationResponse showElapsedNotification(@NonNull NotificationRequest request);
    @NonNull CancelResponse cancelTimer(@NonNull CancelRequest request);
    void toggleExtendByShake(@NonNull ToggleRequest request);
    @NonNull InstalledAppsResponse getInstalledPlayerApps();
    @NonNull InstalledAppsResponse getInstalledAlarmApps();
    void launchApp(@NonNull LaunchAppRequest request);

    /** The codec used by HostTimerApi. */
    static MessageCodec<Object> getCodec() {
      return HostTimerApiCodec.INSTANCE;
    }

    /** Sets up an instance of `HostTimerApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HostTimerApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.showRunningNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              RunningNotificationRequest requestArg = (RunningNotificationRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              NotificationResponse output = api.showRunningNotification(requestArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.showPausingNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              TimeNotificationRequest requestArg = (TimeNotificationRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              NotificationResponse output = api.showPausingNotification(requestArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.showElapsedNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              NotificationRequest requestArg = (NotificationRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              NotificationResponse output = api.showElapsedNotification(requestArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.cancelTimer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CancelRequest requestArg = (CancelRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              CancelResponse output = api.cancelTimer(requestArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.toggleExtendByShake", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ToggleRequest requestArg = (ToggleRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.toggleExtendByShake(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.getInstalledPlayerApps", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              InstalledAppsResponse output = api.getInstalledPlayerApps();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.getInstalledAlarmApps", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              InstalledAppsResponse output = api.getInstalledAlarmApps();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.launchApp", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              LaunchAppRequest requestArg = (LaunchAppRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.launchApp(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class FlutterTimerApiCodec extends StandardMessageCodec {
    public static final FlutterTimerApiCodec INSTANCE = new FlutterTimerApiCodec();
    private FlutterTimerApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CountDownRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ExtendTimeRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return OpenRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return TimerRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return WidgetUpdateResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CountDownRequest) {
        stream.write(128);
        writeValue(stream, ((CountDownRequest) value).toMap());
      } else 
      if (value instanceof ExtendTimeRequest) {
        stream.write(129);
        writeValue(stream, ((ExtendTimeRequest) value).toMap());
      } else 
      if (value instanceof OpenRequest) {
        stream.write(130);
        writeValue(stream, ((OpenRequest) value).toMap());
      } else 
      if (value instanceof TimerRequest) {
        stream.write(131);
        writeValue(stream, ((TimerRequest) value).toMap());
      } else 
      if (value instanceof WidgetUpdateResponse) {
        stream.write(132);
        writeValue(stream, ((WidgetUpdateResponse) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterTimerApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterTimerApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return FlutterTimerApiCodec.INSTANCE;
    }

    public void onExtendTime(@NonNull ExtendTimeRequest requestArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onExtendTime", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onCountDown(@NonNull CountDownRequest requestArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onCountDown", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onContinueRequest(@NonNull TimerRequest requestArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onContinueRequest", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onPauseRequest(@NonNull TimerRequest requestArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onPauseRequest", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onCancelRequest(@NonNull TimerRequest requestArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onCancelRequest", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onRestartRequest(@NonNull TimerRequest requestArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onRestartRequest", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onOpen(@NonNull OpenRequest requestArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onOpen", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onAlarm(@NonNull TimerRequest requestArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onAlarm", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onWidgetUpdate(Reply<WidgetUpdateResponse> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onWidgetUpdate", getCodec());
      channel.send(null, channelReply -> {
        @SuppressWarnings("ConstantConditions")
        WidgetUpdateResponse output = (WidgetUpdateResponse)channelReply;
        callback.reply(output);
      });
    }
    public void onWidgetStartTimer(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onWidgetStartTimer", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
