// Autogenerated from Pigeon (v0.1.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dr.achim.sleep_timer;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InitializationRequest {
    private Long callbackHandle;
    public Long getCallbackHandle() { return callbackHandle; }
    public void setCallbackHandle(Long setterArg) { this.callbackHandle = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("callbackHandle", callbackHandle);
      return toMapResult;
    }
    static InitializationRequest fromMap(HashMap map) {
      InitializationRequest fromMapResult = new InitializationRequest();
      Object callbackHandle = map.get("callbackHandle");
      fromMapResult.callbackHandle = (callbackHandle == null) ? null : ((callbackHandle instanceof Integer) ? (Integer)callbackHandle : (Long)callbackHandle);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ShowNotificationResponse {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    private Boolean success;
    public Boolean getSuccess() { return success; }
    public void setSuccess(Boolean setterArg) { this.success = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("success", success);
      return toMapResult;
    }
    static ShowNotificationResponse fromMap(HashMap map) {
      ShowNotificationResponse fromMapResult = new ShowNotificationResponse();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      Object success = map.get("success");
      fromMapResult.success = (Boolean)success;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ShowRunningNotificationRequest {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    private String title;
    public String getTitle() { return title; }
    public void setTitle(String setterArg) { this.title = setterArg; }

    private String description;
    public String getDescription() { return description; }
    public void setDescription(String setterArg) { this.description = setterArg; }

    private ArrayList actions;
    public ArrayList getActions() { return actions; }
    public void setActions(ArrayList setterArg) { this.actions = setterArg; }

    private Long duration;
    public Long getDuration() { return duration; }
    public void setDuration(Long setterArg) { this.duration = setterArg; }

    private Long remainingTime;
    public Long getRemainingTime() { return remainingTime; }
    public void setRemainingTime(Long setterArg) { this.remainingTime = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("title", title);
      toMapResult.put("description", description);
      toMapResult.put("actions", actions);
      toMapResult.put("duration", duration);
      toMapResult.put("remainingTime", remainingTime);
      return toMapResult;
    }
    static ShowRunningNotificationRequest fromMap(HashMap map) {
      ShowRunningNotificationRequest fromMapResult = new ShowRunningNotificationRequest();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      Object title = map.get("title");
      fromMapResult.title = (String)title;
      Object description = map.get("description");
      fromMapResult.description = (String)description;
      Object actions = map.get("actions");
      fromMapResult.actions = (ArrayList)actions;
      Object duration = map.get("duration");
      fromMapResult.duration = (duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration);
      Object remainingTime = map.get("remainingTime");
      fromMapResult.remainingTime = (remainingTime == null) ? null : ((remainingTime instanceof Integer) ? (Integer)remainingTime : (Long)remainingTime);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ShowPausingNotificationRequest {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    private String title;
    public String getTitle() { return title; }
    public void setTitle(String setterArg) { this.title = setterArg; }

    private String description;
    public String getDescription() { return description; }
    public void setDescription(String setterArg) { this.description = setterArg; }

    private ArrayList actions;
    public ArrayList getActions() { return actions; }
    public void setActions(ArrayList setterArg) { this.actions = setterArg; }

    private Long remainingTime;
    public Long getRemainingTime() { return remainingTime; }
    public void setRemainingTime(Long setterArg) { this.remainingTime = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("title", title);
      toMapResult.put("description", description);
      toMapResult.put("actions", actions);
      toMapResult.put("remainingTime", remainingTime);
      return toMapResult;
    }
    static ShowPausingNotificationRequest fromMap(HashMap map) {
      ShowPausingNotificationRequest fromMapResult = new ShowPausingNotificationRequest();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      Object title = map.get("title");
      fromMapResult.title = (String)title;
      Object description = map.get("description");
      fromMapResult.description = (String)description;
      Object actions = map.get("actions");
      fromMapResult.actions = (ArrayList)actions;
      Object remainingTime = map.get("remainingTime");
      fromMapResult.remainingTime = (remainingTime == null) ? null : ((remainingTime instanceof Integer) ? (Integer)remainingTime : (Long)remainingTime);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ShowElapsedNotificationRequest {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    private String title;
    public String getTitle() { return title; }
    public void setTitle(String setterArg) { this.title = setterArg; }

    private String description;
    public String getDescription() { return description; }
    public void setDescription(String setterArg) { this.description = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("title", title);
      toMapResult.put("description", description);
      return toMapResult;
    }
    static ShowElapsedNotificationRequest fromMap(HashMap map) {
      ShowElapsedNotificationRequest fromMapResult = new ShowElapsedNotificationRequest();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      Object title = map.get("title");
      fromMapResult.title = (String)title;
      Object description = map.get("description");
      fromMapResult.description = (String)description;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CancelNotificationResponse {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    private Boolean success;
    public Boolean getSuccess() { return success; }
    public void setSuccess(Boolean setterArg) { this.success = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("success", success);
      return toMapResult;
    }
    static CancelNotificationResponse fromMap(HashMap map) {
      CancelNotificationResponse fromMapResult = new CancelNotificationResponse();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      Object success = map.get("success");
      fromMapResult.success = (Boolean)success;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CancelNotificationRequest {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      return toMapResult;
    }
    static CancelNotificationRequest fromMap(HashMap map) {
      CancelNotificationRequest fromMapResult = new CancelNotificationRequest();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ExtendTimeResponse {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    private Long additionalTime;
    public Long getAdditionalTime() { return additionalTime; }
    public void setAdditionalTime(Long setterArg) { this.additionalTime = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      toMapResult.put("additionalTime", additionalTime);
      return toMapResult;
    }
    static ExtendTimeResponse fromMap(HashMap map) {
      ExtendTimeResponse fromMapResult = new ExtendTimeResponse();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      Object additionalTime = map.get("additionalTime");
      fromMapResult.additionalTime = (additionalTime == null) ? null : ((additionalTime instanceof Integer) ? (Integer)additionalTime : (Long)additionalTime);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ContinueRequest {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      return toMapResult;
    }
    static ContinueRequest fromMap(HashMap map) {
      ContinueRequest fromMapResult = new ContinueRequest();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PauseRequest {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      return toMapResult;
    }
    static PauseRequest fromMap(HashMap map) {
      PauseRequest fromMapResult = new PauseRequest();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CancelRequest {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      return toMapResult;
    }
    static CancelRequest fromMap(HashMap map) {
      CancelRequest fromMapResult = new CancelRequest();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OpenRequest {
    private String timerId;
    public String getTimerId() { return timerId; }
    public void setTimerId(String setterArg) { this.timerId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timerId", timerId);
      return toMapResult;
    }
    static OpenRequest fromMap(HashMap map) {
      OpenRequest fromMapResult = new OpenRequest();
      Object timerId = map.get("timerId");
      fromMapResult.timerId = (String)timerId;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HostTimerApi {
    void init(InitializationRequest arg);
    ShowNotificationResponse showRunningNotification(ShowRunningNotificationRequest arg);
    ShowNotificationResponse showPausingNotification(ShowPausingNotificationRequest arg);
    ShowNotificationResponse showElapsedNotification(ShowElapsedNotificationRequest arg);
    CancelNotificationResponse cancelNotification(CancelNotificationRequest arg);

    /** Sets up an instance of `HostTimerApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, HostTimerApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.init", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              InitializationRequest input = InitializationRequest.fromMap((HashMap)message);
              api.init(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.showRunningNotification", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              ShowRunningNotificationRequest input = ShowRunningNotificationRequest.fromMap((HashMap)message);
              ShowNotificationResponse output = api.showRunningNotification(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.showPausingNotification", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              ShowPausingNotificationRequest input = ShowPausingNotificationRequest.fromMap((HashMap)message);
              ShowNotificationResponse output = api.showPausingNotification(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.showElapsedNotification", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              ShowElapsedNotificationRequest input = ShowElapsedNotificationRequest.fromMap((HashMap)message);
              ShowNotificationResponse output = api.showElapsedNotification(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostTimerApi.cancelNotification", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              CancelNotificationRequest input = CancelNotificationRequest.fromMap((HashMap)message);
              CancelNotificationResponse output = api.cancelNotification(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterTimerApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterTimerApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void onShowRunningNotification(ShowNotificationResponse argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onShowRunningNotification", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onExtendTime(ExtendTimeResponse argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onExtendTime", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onContinueRequest(ContinueRequest argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onContinueRequest", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onPauseRequest(PauseRequest argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onPauseRequest", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onCancelRequest(CancelRequest argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onCancelRequest", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onOpen(OpenRequest argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterTimerApi.onOpen", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
