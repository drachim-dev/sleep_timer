// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


class NotificationRequest {
  NotificationRequest({
    this.timerId,
    this.title,
    this.description,
    this.accentColor,
    this.restartAction,
    this.continueAction,
    this.pauseAction,
    this.cancelAction,
    this.extendActions,
  });

  String? timerId;

  String? title;

  String? description;

  int? accentColor;

  String? restartAction;

  String? continueAction;

  String? pauseAction;

  String? cancelAction;

  List<int?>? extendActions;

  List<Object?> _toList() {
    return <Object?>[
      timerId,
      title,
      description,
      accentColor,
      restartAction,
      continueAction,
      pauseAction,
      cancelAction,
      extendActions,
    ];
  }

  Object encode() {
    return _toList();  }

  static NotificationRequest decode(Object result) {
    result as List<Object?>;
    return NotificationRequest(
      timerId: result[0] as String?,
      title: result[1] as String?,
      description: result[2] as String?,
      accentColor: result[3] as int?,
      restartAction: result[4] as String?,
      continueAction: result[5] as String?,
      pauseAction: result[6] as String?,
      cancelAction: result[7] as String?,
      extendActions: (result[8] as List<Object?>?)?.cast<int?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NotificationRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class TimeNotificationRequest {
  TimeNotificationRequest({
    this.timerId,
    this.title,
    this.description,
    this.accentColor,
    this.restartAction,
    this.continueAction,
    this.pauseAction,
    this.cancelAction,
    this.extendActions,
    this.duration,
    this.remainingTime,
  });

  String? timerId;

  String? title;

  String? description;

  int? accentColor;

  String? restartAction;

  String? continueAction;

  String? pauseAction;

  String? cancelAction;

  List<int?>? extendActions;

  /// The initial number of minutes the timer was set to.
  int? duration;

  /// The number of seconds left for the timer.
  int? remainingTime;

  List<Object?> _toList() {
    return <Object?>[
      timerId,
      title,
      description,
      accentColor,
      restartAction,
      continueAction,
      pauseAction,
      cancelAction,
      extendActions,
      duration,
      remainingTime,
    ];
  }

  Object encode() {
    return _toList();  }

  static TimeNotificationRequest decode(Object result) {
    result as List<Object?>;
    return TimeNotificationRequest(
      timerId: result[0] as String?,
      title: result[1] as String?,
      description: result[2] as String?,
      accentColor: result[3] as int?,
      restartAction: result[4] as String?,
      continueAction: result[5] as String?,
      pauseAction: result[6] as String?,
      cancelAction: result[7] as String?,
      extendActions: (result[8] as List<Object?>?)?.cast<int?>(),
      duration: result[9] as int?,
      remainingTime: result[10] as int?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TimeNotificationRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class RunningNotificationRequest {
  RunningNotificationRequest({
    this.timerId,
    this.title,
    this.description,
    this.accentColor,
    this.restartAction,
    this.continueAction,
    this.pauseAction,
    this.cancelAction,
    this.extendActions,
    this.duration,
    this.remainingTime,
    this.shakeToExtend,
  });

  String? timerId;

  String? title;

  String? description;

  int? accentColor;

  String? restartAction;

  String? continueAction;

  String? pauseAction;

  String? cancelAction;

  List<int?>? extendActions;

  /// The initial number of minutes the timer was set to.
  int? duration;

  /// The number of seconds left for the timer.
  int? remainingTime;

  /// Enable shake to extend functionality.
  bool? shakeToExtend;

  List<Object?> _toList() {
    return <Object?>[
      timerId,
      title,
      description,
      accentColor,
      restartAction,
      continueAction,
      pauseAction,
      cancelAction,
      extendActions,
      duration,
      remainingTime,
      shakeToExtend,
    ];
  }

  Object encode() {
    return _toList();  }

  static RunningNotificationRequest decode(Object result) {
    result as List<Object?>;
    return RunningNotificationRequest(
      timerId: result[0] as String?,
      title: result[1] as String?,
      description: result[2] as String?,
      accentColor: result[3] as int?,
      restartAction: result[4] as String?,
      continueAction: result[5] as String?,
      pauseAction: result[6] as String?,
      cancelAction: result[7] as String?,
      extendActions: (result[8] as List<Object?>?)?.cast<int?>(),
      duration: result[9] as int?,
      remainingTime: result[10] as int?,
      shakeToExtend: result[11] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RunningNotificationRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NotificationResponse {
  NotificationResponse({
    this.timerId,
    this.success,
  });

  String? timerId;

  bool? success;

  List<Object?> _toList() {
    return <Object?>[
      timerId,
      success,
    ];
  }

  Object encode() {
    return _toList();  }

  static NotificationResponse decode(Object result) {
    result as List<Object?>;
    return NotificationResponse(
      timerId: result[0] as String?,
      success: result[1] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NotificationResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CancelRequest {
  CancelRequest({
    this.timerId,
  });

  String? timerId;

  List<Object?> _toList() {
    return <Object?>[
      timerId,
    ];
  }

  Object encode() {
    return _toList();  }

  static CancelRequest decode(Object result) {
    result as List<Object?>;
    return CancelRequest(
      timerId: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CancelRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CancelResponse {
  CancelResponse({
    this.timerId,
    this.success,
  });

  String? timerId;

  bool? success;

  List<Object?> _toList() {
    return <Object?>[
      timerId,
      success,
    ];
  }

  Object encode() {
    return _toList();  }

  static CancelResponse decode(Object result) {
    result as List<Object?>;
    return CancelResponse(
      timerId: result[0] as String?,
      success: result[1] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CancelResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ExtendTimeRequest {
  ExtendTimeRequest({
    this.timerId,
    this.additionalTime,
  });

  String? timerId;

  /// The time in seconds the timer was extended by.
  int? additionalTime;

  List<Object?> _toList() {
    return <Object?>[
      timerId,
      additionalTime,
    ];
  }

  Object encode() {
    return _toList();  }

  static ExtendTimeRequest decode(Object result) {
    result as List<Object?>;
    return ExtendTimeRequest(
      timerId: result[0] as String?,
      additionalTime: result[1] as int?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ExtendTimeRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CountDownRequest {
  CountDownRequest({
    this.timerId,
    this.newTime,
  });

  String? timerId;

  /// The new time after countdown in seconds.
  int? newTime;

  List<Object?> _toList() {
    return <Object?>[
      timerId,
      newTime,
    ];
  }

  Object encode() {
    return _toList();  }

  static CountDownRequest decode(Object result) {
    result as List<Object?>;
    return CountDownRequest(
      timerId: result[0] as String?,
      newTime: result[1] as int?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CountDownRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class OpenRequest {
  OpenRequest({
    this.timerId,
  });

  String? timerId;

  List<Object?> _toList() {
    return <Object?>[
      timerId,
    ];
  }

  Object encode() {
    return _toList();  }

  static OpenRequest decode(Object result) {
    result as List<Object?>;
    return OpenRequest(
      timerId: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! OpenRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class TimerRequest {
  TimerRequest({
    this.timerId,
  });

  String? timerId;

  List<Object?> _toList() {
    return <Object?>[
      timerId,
    ];
  }

  Object encode() {
    return _toList();  }

  static TimerRequest decode(Object result) {
    result as List<Object?>;
    return TimerRequest(
      timerId: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TimerRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class WidgetUpdateResponse {
  WidgetUpdateResponse({
    this.title,
  });

  String? title;

  List<Object?> _toList() {
    return <Object?>[
      title,
    ];
  }

  Object encode() {
    return _toList();  }

  static WidgetUpdateResponse decode(Object result) {
    result as List<Object?>;
    return WidgetUpdateResponse(
      title: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! WidgetUpdateResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Package {
  Package({
    this.title,
    this.icon,
    this.packageName,
  });

  String? title;

  String? icon;

  String? packageName;

  List<Object?> _toList() {
    return <Object?>[
      title,
      icon,
      packageName,
    ];
  }

  Object encode() {
    return _toList();  }

  static Package decode(Object result) {
    result as List<Object?>;
    return Package(
      title: result[0] as String?,
      icon: result[1] as String?,
      packageName: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Package || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class InstalledAppsResponse {
  InstalledAppsResponse({
    this.apps,
  });

  List<Package?>? apps;

  List<Object?> _toList() {
    return <Object?>[
      apps,
    ];
  }

  Object encode() {
    return _toList();  }

  static InstalledAppsResponse decode(Object result) {
    result as List<Object?>;
    return InstalledAppsResponse(
      apps: (result[0] as List<Object?>?)?.cast<Package?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! InstalledAppsResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class LaunchAppRequest {
  LaunchAppRequest({
    this.packageName,
  });

  String? packageName;

  List<Object?> _toList() {
    return <Object?>[
      packageName,
    ];
  }

  Object encode() {
    return _toList();  }

  static LaunchAppRequest decode(Object result) {
    result as List<Object?>;
    return LaunchAppRequest(
      packageName: result[0] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! LaunchAppRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ToggleRequest {
  ToggleRequest({
    this.enable,
  });

  bool? enable;

  List<Object?> _toList() {
    return <Object?>[
      enable,
    ];
  }

  Object encode() {
    return _toList();  }

  static ToggleRequest decode(Object result) {
    result as List<Object?>;
    return ToggleRequest(
      enable: result[0] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ToggleRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is NotificationRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is TimeNotificationRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is RunningNotificationRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is NotificationResponse) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is CancelRequest) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is CancelResponse) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is ExtendTimeRequest) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is CountDownRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is OpenRequest) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is TimerRequest) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is WidgetUpdateResponse) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is Package) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is InstalledAppsResponse) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is LaunchAppRequest) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is ToggleRequest) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return NotificationRequest.decode(readValue(buffer)!);
      case 130: 
        return TimeNotificationRequest.decode(readValue(buffer)!);
      case 131: 
        return RunningNotificationRequest.decode(readValue(buffer)!);
      case 132: 
        return NotificationResponse.decode(readValue(buffer)!);
      case 133: 
        return CancelRequest.decode(readValue(buffer)!);
      case 134: 
        return CancelResponse.decode(readValue(buffer)!);
      case 135: 
        return ExtendTimeRequest.decode(readValue(buffer)!);
      case 136: 
        return CountDownRequest.decode(readValue(buffer)!);
      case 137: 
        return OpenRequest.decode(readValue(buffer)!);
      case 138: 
        return TimerRequest.decode(readValue(buffer)!);
      case 139: 
        return WidgetUpdateResponse.decode(readValue(buffer)!);
      case 140: 
        return Package.decode(readValue(buffer)!);
      case 141: 
        return InstalledAppsResponse.decode(readValue(buffer)!);
      case 142: 
        return LaunchAppRequest.decode(readValue(buffer)!);
      case 143: 
        return ToggleRequest.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class HostTimerApi {
  /// Constructor for [HostTimerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HostTimerApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<NotificationResponse> showRunningNotification(RunningNotificationRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sleep_timer.HostTimerApi.showRunningNotification$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NotificationResponse?)!;
    }
  }

  Future<NotificationResponse> showPausingNotification(TimeNotificationRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sleep_timer.HostTimerApi.showPausingNotification$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NotificationResponse?)!;
    }
  }

  Future<NotificationResponse> showElapsedNotification(NotificationRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sleep_timer.HostTimerApi.showElapsedNotification$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NotificationResponse?)!;
    }
  }

  Future<CancelResponse> cancelTimer(CancelRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sleep_timer.HostTimerApi.cancelTimer$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as CancelResponse?)!;
    }
  }

  Future<void> toggleExtendByShake(ToggleRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sleep_timer.HostTimerApi.toggleExtendByShake$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<InstalledAppsResponse> getInstalledPlayerApps() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sleep_timer.HostTimerApi.getInstalledPlayerApps$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as InstalledAppsResponse?)!;
    }
  }

  Future<InstalledAppsResponse> getInstalledAlarmApps() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sleep_timer.HostTimerApi.getInstalledAlarmApps$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as InstalledAppsResponse?)!;
    }
  }

  Future<void> launchApp(LaunchAppRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sleep_timer.HostTimerApi.launchApp$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class FlutterTimerApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onExtendTime(ExtendTimeRequest request);

  void onCountDown(CountDownRequest request);

  void onContinueRequest(TimerRequest request);

  void onPauseRequest(TimerRequest request);

  void onCancelRequest(TimerRequest request);

  void onRestartRequest(TimerRequest request);

  void onOpen(OpenRequest request);

  void onAlarm(TimerRequest request);

  WidgetUpdateResponse onWidgetUpdate();

  void onWidgetStartTimer();

  static void setUp(FlutterTimerApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onExtendTime$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onExtendTime was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ExtendTimeRequest? arg_request = (args[0] as ExtendTimeRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onExtendTime was null, expected non-null ExtendTimeRequest.');
          try {
            api.onExtendTime(arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onCountDown$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onCountDown was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CountDownRequest? arg_request = (args[0] as CountDownRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onCountDown was null, expected non-null CountDownRequest.');
          try {
            api.onCountDown(arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onContinueRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onContinueRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimerRequest? arg_request = (args[0] as TimerRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onContinueRequest was null, expected non-null TimerRequest.');
          try {
            api.onContinueRequest(arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onPauseRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onPauseRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimerRequest? arg_request = (args[0] as TimerRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onPauseRequest was null, expected non-null TimerRequest.');
          try {
            api.onPauseRequest(arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onCancelRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onCancelRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimerRequest? arg_request = (args[0] as TimerRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onCancelRequest was null, expected non-null TimerRequest.');
          try {
            api.onCancelRequest(arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onRestartRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onRestartRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimerRequest? arg_request = (args[0] as TimerRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onRestartRequest was null, expected non-null TimerRequest.');
          try {
            api.onRestartRequest(arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onOpen$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onOpen was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final OpenRequest? arg_request = (args[0] as OpenRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onOpen was null, expected non-null OpenRequest.');
          try {
            api.onOpen(arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onAlarm$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onAlarm was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimerRequest? arg_request = (args[0] as TimerRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onAlarm was null, expected non-null TimerRequest.');
          try {
            api.onAlarm(arg_request!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onWidgetUpdate$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final WidgetUpdateResponse output = api.onWidgetUpdate();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.sleep_timer.FlutterTimerApi.onWidgetStartTimer$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onWidgetStartTimer();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
