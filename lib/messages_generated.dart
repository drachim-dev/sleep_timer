// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class NotificationRequest {
  NotificationRequest({
    this.timerId,
    this.title,
    this.description,
    this.accentColor,
    this.restartAction,
    this.continueAction,
    this.pauseAction,
    this.cancelAction,
    this.extendActions,
  });

  String? timerId;
  String? title;
  String? description;
  int? accentColor;
  String? restartAction;
  String? continueAction;
  String? pauseAction;
  String? cancelAction;
  List<int?>? extendActions;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['timerId'] = timerId;
    pigeonMap['title'] = title;
    pigeonMap['description'] = description;
    pigeonMap['accentColor'] = accentColor;
    pigeonMap['restartAction'] = restartAction;
    pigeonMap['continueAction'] = continueAction;
    pigeonMap['pauseAction'] = pauseAction;
    pigeonMap['cancelAction'] = cancelAction;
    pigeonMap['extendActions'] = extendActions;
    return pigeonMap;
  }

  static NotificationRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return NotificationRequest(
      timerId: pigeonMap['timerId'] as String?,
      title: pigeonMap['title'] as String?,
      description: pigeonMap['description'] as String?,
      accentColor: pigeonMap['accentColor'] as int?,
      restartAction: pigeonMap['restartAction'] as String?,
      continueAction: pigeonMap['continueAction'] as String?,
      pauseAction: pigeonMap['pauseAction'] as String?,
      cancelAction: pigeonMap['cancelAction'] as String?,
      extendActions: (pigeonMap['extendActions'] as List<Object?>?)?.cast<int?>(),
    );
  }
}

class TimeNotificationRequest {
  TimeNotificationRequest({
    this.description,
    this.timerId,
    this.title,
    this.accentColor,
    this.restartAction,
    this.continueAction,
    this.pauseAction,
    this.cancelAction,
    this.extendActions,
    this.duration,
    this.remainingTime,
  });

  String? description;
  String? timerId;
  String? title;
  int? accentColor;
  String? restartAction;
  String? continueAction;
  String? pauseAction;
  String? cancelAction;
  List<int?>? extendActions;
  int? duration;
  int? remainingTime;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['description'] = description;
    pigeonMap['timerId'] = timerId;
    pigeonMap['title'] = title;
    pigeonMap['accentColor'] = accentColor;
    pigeonMap['restartAction'] = restartAction;
    pigeonMap['continueAction'] = continueAction;
    pigeonMap['pauseAction'] = pauseAction;
    pigeonMap['cancelAction'] = cancelAction;
    pigeonMap['extendActions'] = extendActions;
    pigeonMap['duration'] = duration;
    pigeonMap['remainingTime'] = remainingTime;
    return pigeonMap;
  }

  static TimeNotificationRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TimeNotificationRequest(
      description: pigeonMap['description'] as String?,
      timerId: pigeonMap['timerId'] as String?,
      title: pigeonMap['title'] as String?,
      accentColor: pigeonMap['accentColor'] as int?,
      restartAction: pigeonMap['restartAction'] as String?,
      continueAction: pigeonMap['continueAction'] as String?,
      pauseAction: pigeonMap['pauseAction'] as String?,
      cancelAction: pigeonMap['cancelAction'] as String?,
      extendActions: (pigeonMap['extendActions'] as List<Object?>?)?.cast<int?>(),
      duration: pigeonMap['duration'] as int?,
      remainingTime: pigeonMap['remainingTime'] as int?,
    );
  }
}

class RunningNotificationRequest {
  RunningNotificationRequest({
    this.description,
    this.timerId,
    this.title,
    this.accentColor,
    this.restartAction,
    this.continueAction,
    this.pauseAction,
    this.cancelAction,
    this.extendActions,
    this.duration,
    this.remainingTime,
    this.shakeToExtend,
  });

  String? description;
  String? timerId;
  String? title;
  int? accentColor;
  String? restartAction;
  String? continueAction;
  String? pauseAction;
  String? cancelAction;
  List<int?>? extendActions;
  int? duration;
  int? remainingTime;
  bool? shakeToExtend;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['description'] = description;
    pigeonMap['timerId'] = timerId;
    pigeonMap['title'] = title;
    pigeonMap['accentColor'] = accentColor;
    pigeonMap['restartAction'] = restartAction;
    pigeonMap['continueAction'] = continueAction;
    pigeonMap['pauseAction'] = pauseAction;
    pigeonMap['cancelAction'] = cancelAction;
    pigeonMap['extendActions'] = extendActions;
    pigeonMap['duration'] = duration;
    pigeonMap['remainingTime'] = remainingTime;
    pigeonMap['shakeToExtend'] = shakeToExtend;
    return pigeonMap;
  }

  static RunningNotificationRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return RunningNotificationRequest(
      description: pigeonMap['description'] as String?,
      timerId: pigeonMap['timerId'] as String?,
      title: pigeonMap['title'] as String?,
      accentColor: pigeonMap['accentColor'] as int?,
      restartAction: pigeonMap['restartAction'] as String?,
      continueAction: pigeonMap['continueAction'] as String?,
      pauseAction: pigeonMap['pauseAction'] as String?,
      cancelAction: pigeonMap['cancelAction'] as String?,
      extendActions: (pigeonMap['extendActions'] as List<Object?>?)?.cast<int?>(),
      duration: pigeonMap['duration'] as int?,
      remainingTime: pigeonMap['remainingTime'] as int?,
      shakeToExtend: pigeonMap['shakeToExtend'] as bool?,
    );
  }
}

class NotificationResponse {
  NotificationResponse({
    this.timerId,
    this.success,
  });

  String? timerId;
  bool? success;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['timerId'] = timerId;
    pigeonMap['success'] = success;
    return pigeonMap;
  }

  static NotificationResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return NotificationResponse(
      timerId: pigeonMap['timerId'] as String?,
      success: pigeonMap['success'] as bool?,
    );
  }
}

class CancelRequest {
  CancelRequest({
    this.timerId,
  });

  String? timerId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['timerId'] = timerId;
    return pigeonMap;
  }

  static CancelRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CancelRequest(
      timerId: pigeonMap['timerId'] as String?,
    );
  }
}

class CancelResponse {
  CancelResponse({
    this.timerId,
    this.success,
  });

  String? timerId;
  bool? success;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['timerId'] = timerId;
    pigeonMap['success'] = success;
    return pigeonMap;
  }

  static CancelResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CancelResponse(
      timerId: pigeonMap['timerId'] as String?,
      success: pigeonMap['success'] as bool?,
    );
  }
}

class ExtendTimeRequest {
  ExtendTimeRequest({
    this.timerId,
    this.additionalTime,
  });

  String? timerId;
  int? additionalTime;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['timerId'] = timerId;
    pigeonMap['additionalTime'] = additionalTime;
    return pigeonMap;
  }

  static ExtendTimeRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ExtendTimeRequest(
      timerId: pigeonMap['timerId'] as String?,
      additionalTime: pigeonMap['additionalTime'] as int?,
    );
  }
}

class CountDownRequest {
  CountDownRequest({
    this.timerId,
    this.newTime,
  });

  String? timerId;
  int? newTime;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['timerId'] = timerId;
    pigeonMap['newTime'] = newTime;
    return pigeonMap;
  }

  static CountDownRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CountDownRequest(
      timerId: pigeonMap['timerId'] as String?,
      newTime: pigeonMap['newTime'] as int?,
    );
  }
}

class OpenRequest {
  OpenRequest({
    this.timerId,
  });

  String? timerId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['timerId'] = timerId;
    return pigeonMap;
  }

  static OpenRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return OpenRequest(
      timerId: pigeonMap['timerId'] as String?,
    );
  }
}

class TimerRequest {
  TimerRequest({
    this.timerId,
  });

  String? timerId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['timerId'] = timerId;
    return pigeonMap;
  }

  static TimerRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TimerRequest(
      timerId: pigeonMap['timerId'] as String?,
    );
  }
}

class WidgetUpdateResponse {
  WidgetUpdateResponse({
    this.title,
  });

  String? title;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['title'] = title;
    return pigeonMap;
  }

  static WidgetUpdateResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return WidgetUpdateResponse(
      title: pigeonMap['title'] as String?,
    );
  }
}

class Package {
  Package({
    this.title,
    this.icon,
    this.packageName,
  });

  String? title;
  String? icon;
  String? packageName;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['title'] = title;
    pigeonMap['icon'] = icon;
    pigeonMap['packageName'] = packageName;
    return pigeonMap;
  }

  static Package decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Package(
      title: pigeonMap['title'] as String?,
      icon: pigeonMap['icon'] as String?,
      packageName: pigeonMap['packageName'] as String?,
    );
  }
}

class InstalledAppsResponse {
  InstalledAppsResponse({
    this.apps,
  });

  List<Package?>? apps;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['apps'] = apps;
    return pigeonMap;
  }

  static InstalledAppsResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return InstalledAppsResponse(
      apps: (pigeonMap['apps'] as List<Object?>?)?.cast<Package?>(),
    );
  }
}

class LaunchAppRequest {
  LaunchAppRequest({
    this.packageName,
  });

  String? packageName;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['packageName'] = packageName;
    return pigeonMap;
  }

  static LaunchAppRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LaunchAppRequest(
      packageName: pigeonMap['packageName'] as String?,
    );
  }
}

class ToggleRequest {
  ToggleRequest({
    this.enable,
  });

  bool? enable;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['enable'] = enable;
    return pigeonMap;
  }

  static ToggleRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ToggleRequest(
      enable: pigeonMap['enable'] as bool?,
    );
  }
}

class _HostTimerApiCodec extends StandardMessageCodec {
  const _HostTimerApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CancelRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is CancelResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is InstalledAppsResponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is LaunchAppRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is NotificationRequest) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
    if (value is NotificationResponse) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else 
    if (value is Package) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else 
    if (value is RunningNotificationRequest) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else 
    if (value is TimeNotificationRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else 
    if (value is ToggleRequest) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return CancelRequest.decode(readValue(buffer)!);
      
      case 129:       
        return CancelResponse.decode(readValue(buffer)!);
      
      case 130:       
        return InstalledAppsResponse.decode(readValue(buffer)!);
      
      case 131:       
        return LaunchAppRequest.decode(readValue(buffer)!);
      
      case 132:       
        return NotificationRequest.decode(readValue(buffer)!);
      
      case 133:       
        return NotificationResponse.decode(readValue(buffer)!);
      
      case 134:       
        return Package.decode(readValue(buffer)!);
      
      case 135:       
        return RunningNotificationRequest.decode(readValue(buffer)!);
      
      case 136:       
        return TimeNotificationRequest.decode(readValue(buffer)!);
      
      case 137:       
        return ToggleRequest.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class HostTimerApi {
  /// Constructor for [HostTimerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HostTimerApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HostTimerApiCodec();

  Future<NotificationResponse> showRunningNotification(RunningNotificationRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostTimerApi.showRunningNotification', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as NotificationResponse?)!;
    }
  }

  Future<NotificationResponse> showPausingNotification(TimeNotificationRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostTimerApi.showPausingNotification', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as NotificationResponse?)!;
    }
  }

  Future<NotificationResponse> showElapsedNotification(NotificationRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostTimerApi.showElapsedNotification', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as NotificationResponse?)!;
    }
  }

  Future<CancelResponse> cancelTimer(CancelRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostTimerApi.cancelTimer', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as CancelResponse?)!;
    }
  }

  Future<void> toggleExtendByShake(ToggleRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostTimerApi.toggleExtendByShake', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<InstalledAppsResponse> getInstalledPlayerApps() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostTimerApi.getInstalledPlayerApps', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as InstalledAppsResponse?)!;
    }
  }

  Future<InstalledAppsResponse> getInstalledAlarmApps() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostTimerApi.getInstalledAlarmApps', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as InstalledAppsResponse?)!;
    }
  }

  Future<void> launchApp(LaunchAppRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostTimerApi.launchApp', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _FlutterTimerApiCodec extends StandardMessageCodec {
  const _FlutterTimerApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CountDownRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is ExtendTimeRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is OpenRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is TimerRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is WidgetUpdateResponse) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return CountDownRequest.decode(readValue(buffer)!);
      
      case 129:       
        return ExtendTimeRequest.decode(readValue(buffer)!);
      
      case 130:       
        return OpenRequest.decode(readValue(buffer)!);
      
      case 131:       
        return TimerRequest.decode(readValue(buffer)!);
      
      case 132:       
        return WidgetUpdateResponse.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class FlutterTimerApi {
  static const MessageCodec<Object?> codec = _FlutterTimerApiCodec();

  void onExtendTime(ExtendTimeRequest request);
  void onCountDown(CountDownRequest request);
  void onContinueRequest(TimerRequest request);
  void onPauseRequest(TimerRequest request);
  void onCancelRequest(TimerRequest request);
  void onRestartRequest(TimerRequest request);
  void onOpen(OpenRequest request);
  void onAlarm(TimerRequest request);
  WidgetUpdateResponse onWidgetUpdate();
  void onWidgetStartTimer();
  static void setup(FlutterTimerApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterTimerApi.onExtendTime', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onExtendTime was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ExtendTimeRequest? arg_request = (args[0] as ExtendTimeRequest?);
          assert(arg_request != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onExtendTime was null, expected non-null ExtendTimeRequest.');
          api.onExtendTime(arg_request!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterTimerApi.onCountDown', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onCountDown was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CountDownRequest? arg_request = (args[0] as CountDownRequest?);
          assert(arg_request != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onCountDown was null, expected non-null CountDownRequest.');
          api.onCountDown(arg_request!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterTimerApi.onContinueRequest', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onContinueRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimerRequest? arg_request = (args[0] as TimerRequest?);
          assert(arg_request != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onContinueRequest was null, expected non-null TimerRequest.');
          api.onContinueRequest(arg_request!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterTimerApi.onPauseRequest', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onPauseRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimerRequest? arg_request = (args[0] as TimerRequest?);
          assert(arg_request != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onPauseRequest was null, expected non-null TimerRequest.');
          api.onPauseRequest(arg_request!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterTimerApi.onCancelRequest', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onCancelRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimerRequest? arg_request = (args[0] as TimerRequest?);
          assert(arg_request != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onCancelRequest was null, expected non-null TimerRequest.');
          api.onCancelRequest(arg_request!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterTimerApi.onRestartRequest', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onRestartRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimerRequest? arg_request = (args[0] as TimerRequest?);
          assert(arg_request != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onRestartRequest was null, expected non-null TimerRequest.');
          api.onRestartRequest(arg_request!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterTimerApi.onOpen', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onOpen was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final OpenRequest? arg_request = (args[0] as OpenRequest?);
          assert(arg_request != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onOpen was null, expected non-null OpenRequest.');
          api.onOpen(arg_request!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterTimerApi.onAlarm', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onAlarm was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TimerRequest? arg_request = (args[0] as TimerRequest?);
          assert(arg_request != null, 'Argument for dev.flutter.pigeon.FlutterTimerApi.onAlarm was null, expected non-null TimerRequest.');
          api.onAlarm(arg_request!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterTimerApi.onWidgetUpdate', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          final WidgetUpdateResponse output = api.onWidgetUpdate();
          return output;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterTimerApi.onWidgetStartTimer', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.onWidgetStartTimer();
          return;
        });
      }
    }
  }
}
