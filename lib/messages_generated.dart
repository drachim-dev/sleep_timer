// Autogenerated from Pigeon (v0.1.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'package:flutter/services.dart';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

class InitializationRequest {
  int callbackHandle;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['callbackHandle'] = callbackHandle;
    return pigeonMap;
  }
  // ignore: unused_element
  static InitializationRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final InitializationRequest result = InitializationRequest();
    result.callbackHandle = pigeonMap['callbackHandle'];
    return result;
  }
}

class NotificationResponse {
  String timerId;
  bool success;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['timerId'] = timerId;
    pigeonMap['success'] = success;
    return pigeonMap;
  }
  // ignore: unused_element
  static NotificationResponse _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final NotificationResponse result = NotificationResponse();
    result.timerId = pigeonMap['timerId'];
    result.success = pigeonMap['success'];
    return result;
  }
}

class TimeNotificationRequest {
  List actions;
  String description;
  String timerId;
  String title;
  int duration;
  int remainingTime;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['actions'] = actions;
    pigeonMap['description'] = description;
    pigeonMap['timerId'] = timerId;
    pigeonMap['title'] = title;
    pigeonMap['duration'] = duration;
    pigeonMap['remainingTime'] = remainingTime;
    return pigeonMap;
  }
  // ignore: unused_element
  static TimeNotificationRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final TimeNotificationRequest result = TimeNotificationRequest();
    result.actions = pigeonMap['actions'];
    result.description = pigeonMap['description'];
    result.timerId = pigeonMap['timerId'];
    result.title = pigeonMap['title'];
    result.duration = pigeonMap['duration'];
    result.remainingTime = pigeonMap['remainingTime'];
    return result;
  }
}

class NotificationRequest {
  String timerId;
  String title;
  String description;
  List actions;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['timerId'] = timerId;
    pigeonMap['title'] = title;
    pigeonMap['description'] = description;
    pigeonMap['actions'] = actions;
    return pigeonMap;
  }
  // ignore: unused_element
  static NotificationRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final NotificationRequest result = NotificationRequest();
    result.timerId = pigeonMap['timerId'];
    result.title = pigeonMap['title'];
    result.description = pigeonMap['description'];
    result.actions = pigeonMap['actions'];
    return result;
  }
}

class CancelResponse {
  String timerId;
  bool success;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['timerId'] = timerId;
    pigeonMap['success'] = success;
    return pigeonMap;
  }
  // ignore: unused_element
  static CancelResponse _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final CancelResponse result = CancelResponse();
    result.timerId = pigeonMap['timerId'];
    result.success = pigeonMap['success'];
    return result;
  }
}

class CancelRequest {
  String timerId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['timerId'] = timerId;
    return pigeonMap;
  }
  // ignore: unused_element
  static CancelRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final CancelRequest result = CancelRequest();
    result.timerId = pigeonMap['timerId'];
    return result;
  }
}

class ExtendTimeResponse {
  String timerId;
  int additionalTime;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['timerId'] = timerId;
    pigeonMap['additionalTime'] = additionalTime;
    return pigeonMap;
  }
  // ignore: unused_element
  static ExtendTimeResponse _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final ExtendTimeResponse result = ExtendTimeResponse();
    result.timerId = pigeonMap['timerId'];
    result.additionalTime = pigeonMap['additionalTime'];
    return result;
  }
}

class TimerRequest {
  String timerId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['timerId'] = timerId;
    return pigeonMap;
  }
  // ignore: unused_element
  static TimerRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final TimerRequest result = TimerRequest();
    result.timerId = pigeonMap['timerId'];
    return result;
  }
}

class OpenRequest {
  String timerId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['timerId'] = timerId;
    return pigeonMap;
  }
  // ignore: unused_element
  static OpenRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final OpenRequest result = OpenRequest();
    result.timerId = pigeonMap['timerId'];
    return result;
  }
}

class HostTimerApi {
  Future<void> init(InitializationRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.HostTimerApi.init', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<NotificationResponse> showRunningNotification(TimeNotificationRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.HostTimerApi.showRunningNotification', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return NotificationResponse._fromMap(replyMap['result']);
    }
    
  }
  Future<NotificationResponse> showPausingNotification(TimeNotificationRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.HostTimerApi.showPausingNotification', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return NotificationResponse._fromMap(replyMap['result']);
    }
    
  }
  Future<NotificationResponse> showElapsedNotification(NotificationRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.HostTimerApi.showElapsedNotification', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return NotificationResponse._fromMap(replyMap['result']);
    }
    
  }
  Future<CancelResponse> cancelTimer(CancelRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.HostTimerApi.cancelTimer', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return CancelResponse._fromMap(replyMap['result']);
    }
    
  }
}

abstract class FlutterTimerApi {
  void onExtendTime(ExtendTimeResponse arg);
  void onContinueRequest(TimerRequest arg);
  void onPauseRequest(TimerRequest arg);
  void onCancelRequest(CancelRequest arg);
  void onRestartRequest(TimerRequest arg);
  void onOpen(OpenRequest arg);
  void onAlarm(TimerRequest arg);
  static void setup(FlutterTimerApi api) {
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.FlutterTimerApi.onExtendTime', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final ExtendTimeResponse input = ExtendTimeResponse._fromMap(mapMessage);
          api.onExtendTime(input);
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.FlutterTimerApi.onContinueRequest', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TimerRequest input = TimerRequest._fromMap(mapMessage);
          api.onContinueRequest(input);
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.FlutterTimerApi.onPauseRequest', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TimerRequest input = TimerRequest._fromMap(mapMessage);
          api.onPauseRequest(input);
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.FlutterTimerApi.onCancelRequest', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final CancelRequest input = CancelRequest._fromMap(mapMessage);
          api.onCancelRequest(input);
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.FlutterTimerApi.onRestartRequest', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TimerRequest input = TimerRequest._fromMap(mapMessage);
          api.onRestartRequest(input);
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.FlutterTimerApi.onOpen', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final OpenRequest input = OpenRequest._fromMap(mapMessage);
          api.onOpen(input);
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.FlutterTimerApi.onAlarm', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TimerRequest input = TimerRequest._fromMap(mapMessage);
          api.onAlarm(input);
        });
      }
    }
  }
}

